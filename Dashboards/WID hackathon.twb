<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20203.20.0918.1727                               -->
<workbook original-version='18.1' source-build='2020.3.1 (20203.20.0918.1727)' source-platform='win' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <_.fcp.MarkAnimation.true...MarkAnimation />
    <_.fcp.ObjectModelEncapsulateLegacy.true...ObjectModelEncapsulateLegacy />
    <_.fcp.ObjectModelTableType.true...ObjectModelTableType />
    <_.fcp.SchemaViewerObjectModel.true...SchemaViewerObjectModel />
    <SheetIdentifierTracking />
    <SortTagCleanup />
    <WindowsPersistSimpleIdentifiers />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource caption='COVID19 Hackathon Dataset' inline='true' name='federated.0x3pkch1s9vqu11c2rbw61wj9910' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='COVID19 Hackathon Dataset' name='textscan.12k5wj71lrawav1bi6rg70fenog4'>
            <connection class='textscan' directory='C:/Users/debdu/Downloads' filename='COVID19 Hackathon Dataset.csv' password='' server='' />
          </named-connection>
        </named-connections>
        <_.fcp.ObjectModelEncapsulateLegacy.false...relation connection='textscan.12k5wj71lrawav1bi6rg70fenog4' name='COVID19 Hackathon Dataset.csv' table='[COVID19 Hackathon Dataset#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_CA' separator=','>
            <column datatype='date' name='Date' ordinal='0' />
            <column datatype='string' name='Continent' ordinal='1' />
            <column datatype='string' name='Countries' ordinal='2' />
            <column datatype='integer' name='New_Cases' ordinal='3' />
            <column datatype='integer' name='New_Deaths' ordinal='4' />
            <column datatype='integer' name='Total_Cases' ordinal='5' />
            <column datatype='integer' name='Total_Deaths' ordinal='6' />
            <column datatype='integer' name='Weekly_Cases' ordinal='7' />
            <column datatype='integer' name='Weekly_Deaths' ordinal='8' />
            <column datatype='real' name='Population_Density' ordinal='9' />
            <column datatype='real' name='Fertility_Rate' ordinal='10' />
            <column datatype='integer' name='GDP_PPP' ordinal='11' />
            <column datatype='real' name='Corruption' ordinal='12' />
            <column datatype='real' name='Government_Effectiveness' ordinal='13' />
            <column datatype='real' name='Political_Stability' ordinal='14' />
            <column datatype='real' name='Rule_of_Law' ordinal='15' />
            <column datatype='real' name='Government_Healthcare_Spend' ordinal='16' />
            <column datatype='real' name='Urban_Population' ordinal='17' />
            <column datatype='real' name='Smoking_Prevalence' ordinal='18' />
            <column datatype='integer' name='Tourism' ordinal='19' />
            <column datatype='real' name='Women_In_Parliament' ordinal='20' />
            <column datatype='real' name='Obesity_Rate' ordinal='21' />
            <column datatype='integer' name='RunTot_New_Cases' ordinal='22' />
            <column datatype='integer' name='RunTot_New_Deaths' ordinal='23' />
            <column datatype='string' name='Country' ordinal='24' />
            <column datatype='string' name='Country Code' ordinal='25' />
            <column datatype='integer' name='Year' ordinal='26' />
            <column datatype='real' name='Diabetes Prevelance % of Population 20-79' ordinal='27' />
            <column datatype='integer' name='Labour Force Total' ordinal='28' />
            <column datatype='integer' name='Population' ordinal='29' />
            <column datatype='real' name='Population Aged 65 and above % of Total' ordinal='30' />
            <column datatype='integer' name='Urban Population' ordinal='31' />
            <column datatype='real' name='Death Rate Per 1000 (2017)' ordinal='32' />
            <column datatype='real' name='PM2.5 air pollution, mean annual exposure (micrograms per cubic meter) (2017)' ordinal='33' />
            <column datatype='real' name='PM2.5 air pollution, population exposed to levels exceeding WHO guideline value (% of total) (2017)' ordinal='34' />
            <column datatype='integer' name='Hospital Beds Year' ordinal='35' />
            <column datatype='real' name='Hospital Beds Per 1000 People' ordinal='36' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.false...relation>
        <_.fcp.ObjectModelEncapsulateLegacy.true...relation connection='textscan.12k5wj71lrawav1bi6rg70fenog4' name='COVID19 Hackathon Dataset.csv' table='[COVID19 Hackathon Dataset#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_CA' separator=','>
            <column datatype='date' name='Date' ordinal='0' />
            <column datatype='string' name='Continent' ordinal='1' />
            <column datatype='string' name='Countries' ordinal='2' />
            <column datatype='integer' name='New_Cases' ordinal='3' />
            <column datatype='integer' name='New_Deaths' ordinal='4' />
            <column datatype='integer' name='Total_Cases' ordinal='5' />
            <column datatype='integer' name='Total_Deaths' ordinal='6' />
            <column datatype='integer' name='Weekly_Cases' ordinal='7' />
            <column datatype='integer' name='Weekly_Deaths' ordinal='8' />
            <column datatype='real' name='Population_Density' ordinal='9' />
            <column datatype='real' name='Fertility_Rate' ordinal='10' />
            <column datatype='integer' name='GDP_PPP' ordinal='11' />
            <column datatype='real' name='Corruption' ordinal='12' />
            <column datatype='real' name='Government_Effectiveness' ordinal='13' />
            <column datatype='real' name='Political_Stability' ordinal='14' />
            <column datatype='real' name='Rule_of_Law' ordinal='15' />
            <column datatype='real' name='Government_Healthcare_Spend' ordinal='16' />
            <column datatype='real' name='Urban_Population' ordinal='17' />
            <column datatype='real' name='Smoking_Prevalence' ordinal='18' />
            <column datatype='integer' name='Tourism' ordinal='19' />
            <column datatype='real' name='Women_In_Parliament' ordinal='20' />
            <column datatype='real' name='Obesity_Rate' ordinal='21' />
            <column datatype='integer' name='RunTot_New_Cases' ordinal='22' />
            <column datatype='integer' name='RunTot_New_Deaths' ordinal='23' />
            <column datatype='string' name='Country' ordinal='24' />
            <column datatype='string' name='Country Code' ordinal='25' />
            <column datatype='integer' name='Year' ordinal='26' />
            <column datatype='real' name='Diabetes Prevelance % of Population 20-79' ordinal='27' />
            <column datatype='integer' name='Labour Force Total' ordinal='28' />
            <column datatype='integer' name='Population' ordinal='29' />
            <column datatype='real' name='Population Aged 65 and above % of Total' ordinal='30' />
            <column datatype='integer' name='Urban Population' ordinal='31' />
            <column datatype='real' name='Death Rate Per 1000 (2017)' ordinal='32' />
            <column datatype='real' name='PM2.5 air pollution, mean annual exposure (micrograms per cubic meter) (2017)' ordinal='33' />
            <column datatype='real' name='PM2.5 air pollution, population exposed to levels exceeding WHO guideline value (% of total) (2017)' ordinal='34' />
            <column datatype='integer' name='Hospital Beds Year' ordinal='35' />
            <column datatype='real' name='Hospital Beds Per 1000 People' ordinal='36' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.true...relation>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[COVID19 Hackathon Dataset.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_GB&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_CA&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Date</remote-name>
            <remote-type>133</remote-type>
            <local-name>[Date]</local-name>
            <parent-name>[COVID19 Hackathon Dataset.csv]</parent-name>
            <remote-alias>Date</remote-alias>
            <ordinal>0</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[COVID19 Hackathon Dataset.csv_FCF56176FE8A4BEDA2D4EFC7358B8FCD]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Continent</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Continent]</local-name>
            <parent-name>[COVID19 Hackathon Dataset.csv]</parent-name>
            <remote-alias>Continent</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[COVID19 Hackathon Dataset.csv_FCF56176FE8A4BEDA2D4EFC7358B8FCD]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Countries</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Countries]</local-name>
            <parent-name>[COVID19 Hackathon Dataset.csv]</parent-name>
            <remote-alias>Countries</remote-alias>
            <ordinal>2</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[COVID19 Hackathon Dataset.csv_FCF56176FE8A4BEDA2D4EFC7358B8FCD]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>New_Cases</remote-name>
            <remote-type>20</remote-type>
            <local-name>[New_Cases]</local-name>
            <parent-name>[COVID19 Hackathon Dataset.csv]</parent-name>
            <remote-alias>New_Cases</remote-alias>
            <ordinal>3</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[COVID19 Hackathon Dataset.csv_FCF56176FE8A4BEDA2D4EFC7358B8FCD]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>New_Deaths</remote-name>
            <remote-type>20</remote-type>
            <local-name>[New_Deaths]</local-name>
            <parent-name>[COVID19 Hackathon Dataset.csv]</parent-name>
            <remote-alias>New_Deaths</remote-alias>
            <ordinal>4</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[COVID19 Hackathon Dataset.csv_FCF56176FE8A4BEDA2D4EFC7358B8FCD]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Total_Cases</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Total_Cases]</local-name>
            <parent-name>[COVID19 Hackathon Dataset.csv]</parent-name>
            <remote-alias>Total_Cases</remote-alias>
            <ordinal>5</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[COVID19 Hackathon Dataset.csv_FCF56176FE8A4BEDA2D4EFC7358B8FCD]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Total_Deaths</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Total_Deaths]</local-name>
            <parent-name>[COVID19 Hackathon Dataset.csv]</parent-name>
            <remote-alias>Total_Deaths</remote-alias>
            <ordinal>6</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[COVID19 Hackathon Dataset.csv_FCF56176FE8A4BEDA2D4EFC7358B8FCD]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Weekly_Cases</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Weekly_Cases]</local-name>
            <parent-name>[COVID19 Hackathon Dataset.csv]</parent-name>
            <remote-alias>Weekly_Cases</remote-alias>
            <ordinal>7</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[COVID19 Hackathon Dataset.csv_FCF56176FE8A4BEDA2D4EFC7358B8FCD]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Weekly_Deaths</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Weekly_Deaths]</local-name>
            <parent-name>[COVID19 Hackathon Dataset.csv]</parent-name>
            <remote-alias>Weekly_Deaths</remote-alias>
            <ordinal>8</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[COVID19 Hackathon Dataset.csv_FCF56176FE8A4BEDA2D4EFC7358B8FCD]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Population_Density</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Population_Density]</local-name>
            <parent-name>[COVID19 Hackathon Dataset.csv]</parent-name>
            <remote-alias>Population_Density</remote-alias>
            <ordinal>9</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[COVID19 Hackathon Dataset.csv_FCF56176FE8A4BEDA2D4EFC7358B8FCD]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Fertility_Rate</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Fertility_Rate]</local-name>
            <parent-name>[COVID19 Hackathon Dataset.csv]</parent-name>
            <remote-alias>Fertility_Rate</remote-alias>
            <ordinal>10</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[COVID19 Hackathon Dataset.csv_FCF56176FE8A4BEDA2D4EFC7358B8FCD]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>GDP_PPP</remote-name>
            <remote-type>20</remote-type>
            <local-name>[GDP_PPP]</local-name>
            <parent-name>[COVID19 Hackathon Dataset.csv]</parent-name>
            <remote-alias>GDP_PPP</remote-alias>
            <ordinal>11</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[COVID19 Hackathon Dataset.csv_FCF56176FE8A4BEDA2D4EFC7358B8FCD]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Corruption</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Corruption]</local-name>
            <parent-name>[COVID19 Hackathon Dataset.csv]</parent-name>
            <remote-alias>Corruption</remote-alias>
            <ordinal>12</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[COVID19 Hackathon Dataset.csv_FCF56176FE8A4BEDA2D4EFC7358B8FCD]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Government_Effectiveness</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Government_Effectiveness]</local-name>
            <parent-name>[COVID19 Hackathon Dataset.csv]</parent-name>
            <remote-alias>Government_Effectiveness</remote-alias>
            <ordinal>13</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[COVID19 Hackathon Dataset.csv_FCF56176FE8A4BEDA2D4EFC7358B8FCD]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Political_Stability</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Political_Stability]</local-name>
            <parent-name>[COVID19 Hackathon Dataset.csv]</parent-name>
            <remote-alias>Political_Stability</remote-alias>
            <ordinal>14</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[COVID19 Hackathon Dataset.csv_FCF56176FE8A4BEDA2D4EFC7358B8FCD]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Rule_of_Law</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Rule_of_Law]</local-name>
            <parent-name>[COVID19 Hackathon Dataset.csv]</parent-name>
            <remote-alias>Rule_of_Law</remote-alias>
            <ordinal>15</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[COVID19 Hackathon Dataset.csv_FCF56176FE8A4BEDA2D4EFC7358B8FCD]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Government_Healthcare_Spend</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Government_Healthcare_Spend]</local-name>
            <parent-name>[COVID19 Hackathon Dataset.csv]</parent-name>
            <remote-alias>Government_Healthcare_Spend</remote-alias>
            <ordinal>16</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[COVID19 Hackathon Dataset.csv_FCF56176FE8A4BEDA2D4EFC7358B8FCD]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Urban_Population</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Urban_Population]</local-name>
            <parent-name>[COVID19 Hackathon Dataset.csv]</parent-name>
            <remote-alias>Urban_Population</remote-alias>
            <ordinal>17</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[COVID19 Hackathon Dataset.csv_FCF56176FE8A4BEDA2D4EFC7358B8FCD]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Smoking_Prevalence</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Smoking_Prevalence]</local-name>
            <parent-name>[COVID19 Hackathon Dataset.csv]</parent-name>
            <remote-alias>Smoking_Prevalence</remote-alias>
            <ordinal>18</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[COVID19 Hackathon Dataset.csv_FCF56176FE8A4BEDA2D4EFC7358B8FCD]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Tourism</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Tourism]</local-name>
            <parent-name>[COVID19 Hackathon Dataset.csv]</parent-name>
            <remote-alias>Tourism</remote-alias>
            <ordinal>19</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[COVID19 Hackathon Dataset.csv_FCF56176FE8A4BEDA2D4EFC7358B8FCD]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Women_In_Parliament</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Women_In_Parliament]</local-name>
            <parent-name>[COVID19 Hackathon Dataset.csv]</parent-name>
            <remote-alias>Women_In_Parliament</remote-alias>
            <ordinal>20</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[COVID19 Hackathon Dataset.csv_FCF56176FE8A4BEDA2D4EFC7358B8FCD]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Obesity_Rate</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Obesity_Rate]</local-name>
            <parent-name>[COVID19 Hackathon Dataset.csv]</parent-name>
            <remote-alias>Obesity_Rate</remote-alias>
            <ordinal>21</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[COVID19 Hackathon Dataset.csv_FCF56176FE8A4BEDA2D4EFC7358B8FCD]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>RunTot_New_Cases</remote-name>
            <remote-type>20</remote-type>
            <local-name>[RunTot_New_Cases]</local-name>
            <parent-name>[COVID19 Hackathon Dataset.csv]</parent-name>
            <remote-alias>RunTot_New_Cases</remote-alias>
            <ordinal>22</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[COVID19 Hackathon Dataset.csv_FCF56176FE8A4BEDA2D4EFC7358B8FCD]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>RunTot_New_Deaths</remote-name>
            <remote-type>20</remote-type>
            <local-name>[RunTot_New_Deaths]</local-name>
            <parent-name>[COVID19 Hackathon Dataset.csv]</parent-name>
            <remote-alias>RunTot_New_Deaths</remote-alias>
            <ordinal>23</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[COVID19 Hackathon Dataset.csv_FCF56176FE8A4BEDA2D4EFC7358B8FCD]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Country</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Country]</local-name>
            <parent-name>[COVID19 Hackathon Dataset.csv]</parent-name>
            <remote-alias>Country</remote-alias>
            <ordinal>24</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[COVID19 Hackathon Dataset.csv_FCF56176FE8A4BEDA2D4EFC7358B8FCD]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Country Code</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Country Code]</local-name>
            <parent-name>[COVID19 Hackathon Dataset.csv]</parent-name>
            <remote-alias>Country Code</remote-alias>
            <ordinal>25</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[COVID19 Hackathon Dataset.csv_FCF56176FE8A4BEDA2D4EFC7358B8FCD]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Year</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Year]</local-name>
            <parent-name>[COVID19 Hackathon Dataset.csv]</parent-name>
            <remote-alias>Year</remote-alias>
            <ordinal>26</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[COVID19 Hackathon Dataset.csv_FCF56176FE8A4BEDA2D4EFC7358B8FCD]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Diabetes Prevelance % of Population 20-79</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Diabetes Prevelance % of Population 20-79]</local-name>
            <parent-name>[COVID19 Hackathon Dataset.csv]</parent-name>
            <remote-alias>Diabetes Prevelance % of Population 20-79</remote-alias>
            <ordinal>27</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[COVID19 Hackathon Dataset.csv_FCF56176FE8A4BEDA2D4EFC7358B8FCD]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Labour Force Total</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Labour Force Total]</local-name>
            <parent-name>[COVID19 Hackathon Dataset.csv]</parent-name>
            <remote-alias>Labour Force Total</remote-alias>
            <ordinal>28</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[COVID19 Hackathon Dataset.csv_FCF56176FE8A4BEDA2D4EFC7358B8FCD]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Population</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Population]</local-name>
            <parent-name>[COVID19 Hackathon Dataset.csv]</parent-name>
            <remote-alias>Population</remote-alias>
            <ordinal>29</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[COVID19 Hackathon Dataset.csv_FCF56176FE8A4BEDA2D4EFC7358B8FCD]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Population Aged 65 and above % of Total</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Population Aged 65 and above % of Total]</local-name>
            <parent-name>[COVID19 Hackathon Dataset.csv]</parent-name>
            <remote-alias>Population Aged 65 and above % of Total</remote-alias>
            <ordinal>30</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[COVID19 Hackathon Dataset.csv_FCF56176FE8A4BEDA2D4EFC7358B8FCD]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Urban Population</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Urban Population]</local-name>
            <parent-name>[COVID19 Hackathon Dataset.csv]</parent-name>
            <remote-alias>Urban Population</remote-alias>
            <ordinal>31</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[COVID19 Hackathon Dataset.csv_FCF56176FE8A4BEDA2D4EFC7358B8FCD]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Death Rate Per 1000 (2017)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Death Rate Per 1000 (2017)]</local-name>
            <parent-name>[COVID19 Hackathon Dataset.csv]</parent-name>
            <remote-alias>Death Rate Per 1000 (2017)</remote-alias>
            <ordinal>32</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[COVID19 Hackathon Dataset.csv_FCF56176FE8A4BEDA2D4EFC7358B8FCD]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>PM2.5 air pollution, mean annual exposure (micrograms per cubic meter) (2017)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[PM2.5 air pollution, mean annual exposure (micrograms per cubic meter) (2017)]</local-name>
            <parent-name>[COVID19 Hackathon Dataset.csv]</parent-name>
            <remote-alias>PM2.5 air pollution, mean annual exposure (micrograms per cubic meter) (2017)</remote-alias>
            <ordinal>33</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[COVID19 Hackathon Dataset.csv_FCF56176FE8A4BEDA2D4EFC7358B8FCD]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>PM2.5 air pollution, population exposed to levels exceeding WHO guideline value (% of total) (2017)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[PM2.5 air pollution, population exposed to levels exceeding WHO guideline value (% of total) (2017)]</local-name>
            <parent-name>[COVID19 Hackathon Dataset.csv]</parent-name>
            <remote-alias>PM2.5 air pollution, population exposed to levels exceeding WHO guideline value (% of total) (2017)</remote-alias>
            <ordinal>34</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[COVID19 Hackathon Dataset.csv_FCF56176FE8A4BEDA2D4EFC7358B8FCD]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Hospital Beds Year</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Hospital Beds Year]</local-name>
            <parent-name>[COVID19 Hackathon Dataset.csv]</parent-name>
            <remote-alias>Hospital Beds Year</remote-alias>
            <ordinal>35</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[COVID19 Hackathon Dataset.csv_FCF56176FE8A4BEDA2D4EFC7358B8FCD]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Hospital Beds Per 1000 People</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Hospital Beds Per 1000 People]</local-name>
            <parent-name>[COVID19 Hackathon Dataset.csv]</parent-name>
            <remote-alias>Hospital Beds Per 1000 People</remote-alias>
            <ordinal>36</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[COVID19 Hackathon Dataset.csv_FCF56176FE8A4BEDA2D4EFC7358B8FCD]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='string' name='[Countries]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column datatype='string' name='[Country Code]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column caption='Fertility Rate' datatype='real' name='[Fertility_Rate]' role='measure' type='quantitative' />
      <column caption='Gdp Ppp' datatype='integer' name='[GDP_PPP]' role='measure' type='quantitative' />
      <column caption='Government Effectiveness' datatype='real' name='[Government_Effectiveness]' role='measure' type='quantitative' />
      <column caption='Government Healthcare Spend' datatype='real' name='[Government_Healthcare_Spend]' role='measure' type='quantitative' />
      <column datatype='real' name='[Hospital Beds Per 1000 People]' role='measure' type='quantitative' />
      <column caption='New Cases' datatype='integer' name='[New_Cases]' role='measure' type='quantitative' />
      <column caption='New Deaths' datatype='integer' name='[New_Deaths]' role='measure' type='quantitative' />
      <column caption='Obesity Rate' datatype='real' name='[Obesity_Rate]' role='measure' type='quantitative' />
      <column caption='Political Stability' datatype='real' name='[Political_Stability]' role='measure' type='quantitative' />
      <column datatype='real' default-format='p0.00%' name='[Population Aged 65 and above % of Total]' role='measure' type='quantitative' />
      <column caption='Population Density' datatype='real' name='[Population_Density]' role='measure' type='quantitative' />
      <column caption='Rule of Law' datatype='real' name='[Rule_of_Law]' role='measure' type='quantitative' />
      <column caption='RunTot New Cases' datatype='integer' name='[RunTot_New_Cases]' role='measure' type='quantitative' />
      <column caption='RunTot New Deaths' datatype='integer' name='[RunTot_New_Deaths]' role='measure' type='quantitative' />
      <column caption='Smoking Prevalence' datatype='real' name='[Smoking_Prevalence]' role='measure' type='quantitative' />
      <column caption='Total Cases' datatype='integer' name='[Total_Cases]' role='measure' type='quantitative' />
      <column caption='Total Deaths' datatype='integer' name='[Total_Deaths]' role='measure' type='quantitative' />
      <column caption='Urban Population1' datatype='real' name='[Urban_Population]' role='measure' type='quantitative' />
      <column caption='Weekly Cases' datatype='integer' name='[Weekly_Cases]' role='measure' type='quantitative' />
      <column caption='Weekly Deaths' datatype='integer' name='[Weekly_Deaths]' role='measure' type='quantitative' />
      <column caption='Women In Parliament' datatype='real' name='[Women_In_Parliament]' role='measure' type='quantitative' />
      <column datatype='integer' name='[Year]' role='dimension' type='quantitative' />
      <_.fcp.ObjectModelTableType.true...column caption='COVID19 Hackathon Dataset.csv' datatype='table' name='[__tableau_internal_object_id__].[COVID19 Hackathon Dataset.csv_FCF56176FE8A4BEDA2D4EFC7358B8FCD]' role='measure' type='quantitative' />
      <column-instance column='[Fertility_Rate]' derivation='Avg' name='[avg:Fertility_Rate:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Government_Healthcare_Spend]' derivation='Avg' name='[avg:Government_Healthcare_Spend:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Hospital Beds Per 1000 People]' derivation='Avg' name='[avg:Hospital Beds Per 1000 People:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Total_Deaths]' derivation='Max' name='[diff:max:Total_Deaths:qk]' pivot='key' type='quantitative'>
        <table-calc diff-options='Relative' ordering-type='Rows' type='Difference'>
          <address>
            <value>-1</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[Total_Cases]' derivation='Max' name='[max:Total_Cases:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Total_Deaths]' derivation='Max' name='[max:Total_Deaths:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Total_Deaths]' derivation='Min' name='[min:Total_Deaths:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Countries]' derivation='None' name='[none:Countries:nk]' pivot='key' type='nominal' />
      <column-instance column='[Total_Cases]' derivation='Sum' name='[sum:Total_Cases:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Total_Deaths]' derivation='Sum' name='[sum:Total_Deaths:qk]' pivot='key' type='quantitative' />
      <layout _.fcp.SchemaViewerObjectModel.false...dim-percentage='0.5' _.fcp.SchemaViewerObjectModel.false...measure-percentage='0.4' dim-ordering='alphabetic' measure-ordering='alphabetic' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:Countries:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Australia&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Cambodia&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Dominica&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Guinea&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Kyrgyz Republic&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Monaco&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Peru&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;South Korea&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Uganda&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Afghanistan&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Bolivia&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Costa Rica&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Gabon&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Israel&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Malaysia&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Nigeria&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Serbia&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Syria&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Angola&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Brunei&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Cyprus&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Ghana&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Jordan&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Mauritania&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Palestine&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Slovak Republic&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Togo&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Bahrain&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Central African Republic&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;El Salvador&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Honduras&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Lesotho&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Mozambique&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Qatar&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;St. Kitts and Nevis&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;United States&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Austria&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Cameroon&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Dominican Republic&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Guinea-Bissau&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Lao&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Mongolia&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Philippines&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;South Sudan&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Ukraine&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Antigua and Barbuda&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Bulgaria&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Czech Republic&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Greece&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Kazakhstan&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Mauritius&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Panama&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Slovenia&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Trinidad and Tobago&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Benin&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Congo, Dem. Rep.&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Finland&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Iraq&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Madagascar&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Nicaragua&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Saudi Arabia&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Sweden&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Zambia&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Albania&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Bosnia and Herzegovina&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Cote d&apos;Ivoire&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Gambia&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Italy&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Maldives&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Norway&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Seychelles&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Tajikistan&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Belgium&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Colombia&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Ethiopia&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Indonesia&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Lithuania&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Netherlands&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;San Marino&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Suriname&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Vietnam&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Argentina&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Burkina Faso&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Denmark&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Grenada&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Kenya&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Mexico&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Papua New Guinea&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Somalia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Tunisia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Bangladesh&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Chad&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Equatorial Guinea&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Hungary&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Liberia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Myanmar&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Romania&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;St. Lucia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Uruguay&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Barbados&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Chile&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Eritrea&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Iceland&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Libya&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Namibia&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Russia&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;St. Vincent and the Grenadines&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Uzbekistan&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Belize&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Comoros&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Fiji&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Iran&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Luxembourg&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;New Zealand&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Sao Tome and Principe&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Swaziland&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Yemen&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Bhutan&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Congo, Rep.&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;France&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Ireland&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Malawi&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Niger&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Senegal&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Switzerland&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Zimbabwe&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Azerbaijan&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Canada&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Ecuador&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Guyana&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Latvia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Montenegro&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Poland&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Spain&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;United Arab Emirates&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Armenia&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Burundi&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Djibouti&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Guatemala&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Kuwait&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Moldova&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Paraguay&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;South Africa&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Turkey&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Algeria&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Botswana&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Croatia&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Georgia&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Jamaica&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Mali&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Oman&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Sierra Leone&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Tanzania&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Belarus&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;China&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Estonia&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;India&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Liechtenstein&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Nepal&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Rwanda&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Sudan&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Venezuela&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Bahamas&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Cape Verde&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Egypt&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Haiti&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Lebanon&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Morocco&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Portugal&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Sri Lanka&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;United Kingdom&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Andorra&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Brazil&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Cuba&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Germany&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Japan&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Malta&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Pakistan&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Singapore&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Thailand&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='shape' field='[none:Countries:nk]' type='shape'>
            <map to='asterisk'>
              <bucket>&quot;Andorra&quot;</bucket>
            </map>
            <map to='asterisk'>
              <bucket>&quot;Barbados&quot;</bucket>
            </map>
            <map to='asterisk'>
              <bucket>&quot;Brunei&quot;</bucket>
            </map>
            <map to='asterisk'>
              <bucket>&quot;Chile&quot;</bucket>
            </map>
            <map to='asterisk'>
              <bucket>&quot;Cyprus&quot;</bucket>
            </map>
            <map to='asterisk'>
              <bucket>&quot;Eritrea&quot;</bucket>
            </map>
            <map to='asterisk'>
              <bucket>&quot;Ghana&quot;</bucket>
            </map>
            <map to='asterisk'>
              <bucket>&quot;Iceland&quot;</bucket>
            </map>
            <map to='asterisk'>
              <bucket>&quot;Jordan&quot;</bucket>
            </map>
            <map to='asterisk'>
              <bucket>&quot;Libya&quot;</bucket>
            </map>
            <map to='asterisk'>
              <bucket>&quot;Mauritania&quot;</bucket>
            </map>
            <map to='asterisk'>
              <bucket>&quot;Namibia&quot;</bucket>
            </map>
            <map to='asterisk'>
              <bucket>&quot;Palestine&quot;</bucket>
            </map>
            <map to='asterisk'>
              <bucket>&quot;Russia&quot;</bucket>
            </map>
            <map to='asterisk'>
              <bucket>&quot;Slovak Republic&quot;</bucket>
            </map>
            <map to='asterisk'>
              <bucket>&quot;St. Vincent and the Grenadines&quot;</bucket>
            </map>
            <map to='asterisk'>
              <bucket>&quot;Togo&quot;</bucket>
            </map>
            <map to='asterisk'>
              <bucket>&quot;Uzbekistan&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;Afghanistan&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;Azerbaijan&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;Bolivia&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;Canada&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;Costa Rica&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;Ecuador&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;Gabon&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;Guyana&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;Israel&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;Latvia&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;Malaysia&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;Montenegro&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;Nigeria&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;Poland&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;Serbia&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;Spain&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;Syria&quot;</bucket>
            </map>
            <map to='circle'>
              <bucket>&quot;United Arab Emirates&quot;</bucket>
            </map>
            <map to='diamond'>
              <bucket>&quot;Angola&quot;</bucket>
            </map>
            <map to='diamond'>
              <bucket>&quot;Belarus&quot;</bucket>
            </map>
            <map to='diamond'>
              <bucket>&quot;Bulgaria&quot;</bucket>
            </map>
            <map to='diamond'>
              <bucket>&quot;China&quot;</bucket>
            </map>
            <map to='diamond'>
              <bucket>&quot;Czech Republic&quot;</bucket>
            </map>
            <map to='diamond'>
              <bucket>&quot;Estonia&quot;</bucket>
            </map>
            <map to='diamond'>
              <bucket>&quot;Greece&quot;</bucket>
            </map>
            <map to='diamond'>
              <bucket>&quot;India&quot;</bucket>
            </map>
            <map to='diamond'>
              <bucket>&quot;Kazakhstan&quot;</bucket>
            </map>
            <map to='diamond'>
              <bucket>&quot;Liechtenstein&quot;</bucket>
            </map>
            <map to='diamond'>
              <bucket>&quot;Mauritius&quot;</bucket>
            </map>
            <map to='diamond'>
              <bucket>&quot;Nepal&quot;</bucket>
            </map>
            <map to='diamond'>
              <bucket>&quot;Panama&quot;</bucket>
            </map>
            <map to='diamond'>
              <bucket>&quot;Rwanda&quot;</bucket>
            </map>
            <map to='diamond'>
              <bucket>&quot;Slovenia&quot;</bucket>
            </map>
            <map to='diamond'>
              <bucket>&quot;Sudan&quot;</bucket>
            </map>
            <map to='diamond'>
              <bucket>&quot;Trinidad and Tobago&quot;</bucket>
            </map>
            <map to='diamond'>
              <bucket>&quot;Venezuela&quot;</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>&quot;Argentina&quot;</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>&quot;Belize&quot;</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>&quot;Burundi&quot;</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>&quot;Comoros&quot;</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>&quot;Djibouti&quot;</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>&quot;Fiji&quot;</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>&quot;Guatemala&quot;</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>&quot;Iran&quot;</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>&quot;Kuwait&quot;</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>&quot;Luxembourg&quot;</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>&quot;Moldova&quot;</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>&quot;New Zealand&quot;</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>&quot;Paraguay&quot;</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>&quot;Sao Tome and Principe&quot;</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>&quot;South Africa&quot;</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>&quot;Swaziland&quot;</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>&quot;Turkey&quot;</bucket>
            </map>
            <map to='down-triangle'>
              <bucket>&quot;Yemen&quot;</bucket>
            </map>
            <map to='left-triangle'>
              <bucket>&quot;Australia&quot;</bucket>
            </map>
            <map to='left-triangle'>
              <bucket>&quot;Benin&quot;</bucket>
            </map>
            <map to='left-triangle'>
              <bucket>&quot;Cambodia&quot;</bucket>
            </map>
            <map to='left-triangle'>
              <bucket>&quot;Congo, Dem. Rep.&quot;</bucket>
            </map>
            <map to='left-triangle'>
              <bucket>&quot;Dominica&quot;</bucket>
            </map>
            <map to='left-triangle'>
              <bucket>&quot;Finland&quot;</bucket>
            </map>
            <map to='left-triangle'>
              <bucket>&quot;Guinea&quot;</bucket>
            </map>
            <map to='left-triangle'>
              <bucket>&quot;Iraq&quot;</bucket>
            </map>
            <map to='left-triangle'>
              <bucket>&quot;Kyrgyz Republic&quot;</bucket>
            </map>
            <map to='left-triangle'>
              <bucket>&quot;Madagascar&quot;</bucket>
            </map>
            <map to='left-triangle'>
              <bucket>&quot;Monaco&quot;</bucket>
            </map>
            <map to='left-triangle'>
              <bucket>&quot;Nicaragua&quot;</bucket>
            </map>
            <map to='left-triangle'>
              <bucket>&quot;Peru&quot;</bucket>
            </map>
            <map to='left-triangle'>
              <bucket>&quot;Saudi Arabia&quot;</bucket>
            </map>
            <map to='left-triangle'>
              <bucket>&quot;South Korea&quot;</bucket>
            </map>
            <map to='left-triangle'>
              <bucket>&quot;Sweden&quot;</bucket>
            </map>
            <map to='left-triangle'>
              <bucket>&quot;Uganda&quot;</bucket>
            </map>
            <map to='left-triangle'>
              <bucket>&quot;Zambia&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;Armenia&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;Bahrain&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;Botswana&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;Central African Republic&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;Croatia&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;El Salvador&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;Georgia&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;Honduras&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;Jamaica&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;Lesotho&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;Mali&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;Mozambique&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;Oman&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;Qatar&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;Sierra Leone&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;St. Kitts and Nevis&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;Tanzania&quot;</bucket>
            </map>
            <map to='plus'>
              <bucket>&quot;United States&quot;</bucket>
            </map>
            <map to='right-triangle'>
              <bucket>&quot;Austria&quot;</bucket>
            </map>
            <map to='right-triangle'>
              <bucket>&quot;Bhutan&quot;</bucket>
            </map>
            <map to='right-triangle'>
              <bucket>&quot;Cameroon&quot;</bucket>
            </map>
            <map to='right-triangle'>
              <bucket>&quot;Congo, Rep.&quot;</bucket>
            </map>
            <map to='right-triangle'>
              <bucket>&quot;Dominican Republic&quot;</bucket>
            </map>
            <map to='right-triangle'>
              <bucket>&quot;France&quot;</bucket>
            </map>
            <map to='right-triangle'>
              <bucket>&quot;Guinea-Bissau&quot;</bucket>
            </map>
            <map to='right-triangle'>
              <bucket>&quot;Ireland&quot;</bucket>
            </map>
            <map to='right-triangle'>
              <bucket>&quot;Lao&quot;</bucket>
            </map>
            <map to='right-triangle'>
              <bucket>&quot;Malawi&quot;</bucket>
            </map>
            <map to='right-triangle'>
              <bucket>&quot;Mongolia&quot;</bucket>
            </map>
            <map to='right-triangle'>
              <bucket>&quot;Niger&quot;</bucket>
            </map>
            <map to='right-triangle'>
              <bucket>&quot;Philippines&quot;</bucket>
            </map>
            <map to='right-triangle'>
              <bucket>&quot;Senegal&quot;</bucket>
            </map>
            <map to='right-triangle'>
              <bucket>&quot;South Sudan&quot;</bucket>
            </map>
            <map to='right-triangle'>
              <bucket>&quot;Switzerland&quot;</bucket>
            </map>
            <map to='right-triangle'>
              <bucket>&quot;Ukraine&quot;</bucket>
            </map>
            <map to='right-triangle'>
              <bucket>&quot;Zimbabwe&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;Algeria&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;Bahamas&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;Bosnia and Herzegovina&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;Cape Verde&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;Cote d&apos;Ivoire&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;Egypt&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;Gambia&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;Haiti&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;Italy&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;Lebanon&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;Maldives&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;Morocco&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;Norway&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;Portugal&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;Seychelles&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;Sri Lanka&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;Tajikistan&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;United Kingdom&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;Albania&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;Bangladesh&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;Brazil&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;Chad&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;Cuba&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;Equatorial Guinea&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;Germany&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;Hungary&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;Japan&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;Liberia&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;Malta&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;Myanmar&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;Pakistan&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;Romania&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;Singapore&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;St. Lucia&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;Thailand&quot;</bucket>
            </map>
            <map to='times'>
              <bucket>&quot;Uruguay&quot;</bucket>
            </map>
            <map to='triangle'>
              <bucket>&quot;Antigua and Barbuda&quot;</bucket>
            </map>
            <map to='triangle'>
              <bucket>&quot;Belgium&quot;</bucket>
            </map>
            <map to='triangle'>
              <bucket>&quot;Burkina Faso&quot;</bucket>
            </map>
            <map to='triangle'>
              <bucket>&quot;Colombia&quot;</bucket>
            </map>
            <map to='triangle'>
              <bucket>&quot;Denmark&quot;</bucket>
            </map>
            <map to='triangle'>
              <bucket>&quot;Ethiopia&quot;</bucket>
            </map>
            <map to='triangle'>
              <bucket>&quot;Grenada&quot;</bucket>
            </map>
            <map to='triangle'>
              <bucket>&quot;Indonesia&quot;</bucket>
            </map>
            <map to='triangle'>
              <bucket>&quot;Kenya&quot;</bucket>
            </map>
            <map to='triangle'>
              <bucket>&quot;Lithuania&quot;</bucket>
            </map>
            <map to='triangle'>
              <bucket>&quot;Mexico&quot;</bucket>
            </map>
            <map to='triangle'>
              <bucket>&quot;Netherlands&quot;</bucket>
            </map>
            <map to='triangle'>
              <bucket>&quot;Papua New Guinea&quot;</bucket>
            </map>
            <map to='triangle'>
              <bucket>&quot;San Marino&quot;</bucket>
            </map>
            <map to='triangle'>
              <bucket>&quot;Somalia&quot;</bucket>
            </map>
            <map to='triangle'>
              <bucket>&quot;Suriname&quot;</bucket>
            </map>
            <map to='triangle'>
              <bucket>&quot;Tunisia&quot;</bucket>
            </map>
            <map to='triangle'>
              <bucket>&quot;Vietnam&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[:Measure Names]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.0x3pkch1s9vqu11c2rbw61wj9910].[avg:Fertility_Rate:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.0x3pkch1s9vqu11c2rbw61wj9910].[avg:Government_Healthcare_Spend:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.0x3pkch1s9vqu11c2rbw61wj9910].[max:Total_Cases:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.0x3pkch1s9vqu11c2rbw61wj9910].[min:Total_Deaths:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.0x3pkch1s9vqu11c2rbw61wj9910].[sum:Total_Cases:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.0x3pkch1s9vqu11c2rbw61wj9910].[diff:max:Total_Deaths:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.0x3pkch1s9vqu11c2rbw61wj9910].[max:Total_Deaths:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.0x3pkch1s9vqu11c2rbw61wj9910].[none:Calculation_1125336994043363330:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.0x3pkch1s9vqu11c2rbw61wj9910].[none:Calculation_1125336994043789315:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.0x3pkch1s9vqu11c2rbw61wj9910].[none:Calculation_1125336994043846660:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.0x3pkch1s9vqu11c2rbw61wj9910].[none:Calculation_1125336994050367497:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.0x3pkch1s9vqu11c2rbw61wj9910].[none:Calculation_1125336994050478090:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.0x3pkch1s9vqu11c2rbw61wj9910].[sum:Total_Deaths:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.0x3pkch1s9vqu11c2rbw61wj9910].[usr:Calculation_1125336994043998213:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.0x3pkch1s9vqu11c2rbw61wj9910].[usr:Calculation_1125336994045509638:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.0x3pkch1s9vqu11c2rbw61wj9910].[usr:Calculation_1125336994045620231:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.0x3pkch1s9vqu11c2rbw61wj9910].[usr:Calculation_1125336994045702152:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.0x3pkch1s9vqu11c2rbw61wj9910].[usr:Calculation_1125336994050588683:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.0x3pkch1s9vqu11c2rbw61wj9910].[avg:Hospital Beds Per 1000 People:qk]&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;Canada&quot;' />
      </semantic-values>
      <_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
        <objects>
          <object caption='COVID19 Hackathon Dataset.csv' id='COVID19 Hackathon Dataset.csv_FCF56176FE8A4BEDA2D4EFC7358B8FCD'>
            <properties context=''>
              <relation connection='textscan.12k5wj71lrawav1bi6rg70fenog4' name='COVID19 Hackathon Dataset.csv' table='[COVID19 Hackathon Dataset#csv]' type='table'>
                <columns character-set='UTF-8' header='yes' locale='en_CA' separator=','>
                  <column datatype='date' name='Date' ordinal='0' />
                  <column datatype='string' name='Continent' ordinal='1' />
                  <column datatype='string' name='Countries' ordinal='2' />
                  <column datatype='integer' name='New_Cases' ordinal='3' />
                  <column datatype='integer' name='New_Deaths' ordinal='4' />
                  <column datatype='integer' name='Total_Cases' ordinal='5' />
                  <column datatype='integer' name='Total_Deaths' ordinal='6' />
                  <column datatype='integer' name='Weekly_Cases' ordinal='7' />
                  <column datatype='integer' name='Weekly_Deaths' ordinal='8' />
                  <column datatype='real' name='Population_Density' ordinal='9' />
                  <column datatype='real' name='Fertility_Rate' ordinal='10' />
                  <column datatype='integer' name='GDP_PPP' ordinal='11' />
                  <column datatype='real' name='Corruption' ordinal='12' />
                  <column datatype='real' name='Government_Effectiveness' ordinal='13' />
                  <column datatype='real' name='Political_Stability' ordinal='14' />
                  <column datatype='real' name='Rule_of_Law' ordinal='15' />
                  <column datatype='real' name='Government_Healthcare_Spend' ordinal='16' />
                  <column datatype='real' name='Urban_Population' ordinal='17' />
                  <column datatype='real' name='Smoking_Prevalence' ordinal='18' />
                  <column datatype='integer' name='Tourism' ordinal='19' />
                  <column datatype='real' name='Women_In_Parliament' ordinal='20' />
                  <column datatype='real' name='Obesity_Rate' ordinal='21' />
                  <column datatype='integer' name='RunTot_New_Cases' ordinal='22' />
                  <column datatype='integer' name='RunTot_New_Deaths' ordinal='23' />
                  <column datatype='string' name='Country' ordinal='24' />
                  <column datatype='string' name='Country Code' ordinal='25' />
                  <column datatype='integer' name='Year' ordinal='26' />
                  <column datatype='real' name='Diabetes Prevelance % of Population 20-79' ordinal='27' />
                  <column datatype='integer' name='Labour Force Total' ordinal='28' />
                  <column datatype='integer' name='Population' ordinal='29' />
                  <column datatype='real' name='Population Aged 65 and above % of Total' ordinal='30' />
                  <column datatype='integer' name='Urban Population' ordinal='31' />
                  <column datatype='real' name='Death Rate Per 1000 (2017)' ordinal='32' />
                  <column datatype='real' name='PM2.5 air pollution, mean annual exposure (micrograms per cubic meter) (2017)' ordinal='33' />
                  <column datatype='real' name='PM2.5 air pollution, population exposed to levels exceeding WHO guideline value (% of total) (2017)' ordinal='34' />
                  <column datatype='integer' name='Hospital Beds Year' ordinal='35' />
                  <column datatype='real' name='Hospital Beds Per 1000 People' ordinal='36' />
                </columns>
              </relation>
            </properties>
          </object>
        </objects>
      </_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
    </datasource>
  </datasources>
  <worksheets>
    <worksheet name='Death/100 vs govt healthcare budget'>
      <table>
        <view>
          <datasources>
            <datasource caption='COVID19 Hackathon Dataset' name='federated.0x3pkch1s9vqu11c2rbw61wj9910' />
          </datasources>
          <datasource-dependencies datasource='federated.0x3pkch1s9vqu11c2rbw61wj9910'>
            <column caption='(MAX([Total Deaths])/AVG([Population]))*100' datatype='real' name='[Calculation_1125336994050588683]' role='measure' type='quantitative' user:unnamed='Death/100 vs govt healthcare budget'>
              <calculation class='tableau' formula='(MAX([Total_Deaths])/AVG([Population]))*100' />
            </column>
            <column datatype='string' name='[Continent]' role='dimension' type='nominal' />
            <column datatype='string' name='[Countries]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='real' name='[Hospital Beds Per 1000 People]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Population]' role='measure' type='quantitative' />
            <column caption='Total Deaths' datatype='integer' name='[Total_Deaths]' role='measure' type='quantitative' />
            <column-instance column='[Hospital Beds Per 1000 People]' derivation='Avg' name='[avg:Hospital Beds Per 1000 People:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Continent]' derivation='None' name='[none:Continent:nk]' pivot='key' type='nominal' />
            <column-instance column='[Countries]' derivation='None' name='[none:Countries:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_1125336994050588683]' derivation='User' name='[usr:Calculation_1125336994050588683:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0x3pkch1s9vqu11c2rbw61wj9910].[none:Continent:nk]' filter-group='5'>
            <groupfilter function='level-members' level='[none:Continent:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.0x3pkch1s9vqu11c2rbw61wj9910].[none:Countries:nk]' filter-group='4'>
            <groupfilter function='level-members' level='[none:Countries:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.0x3pkch1s9vqu11c2rbw61wj9910].[none:Countries:nk]</column>
            <column>[federated.0x3pkch1s9vqu11c2rbw61wj9910].[none:Continent:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <lod column='[federated.0x3pkch1s9vqu11c2rbw61wj9910].[none:Countries:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.0x3pkch1s9vqu11c2rbw61wj9910].[usr:Calculation_1125336994050588683:qk]</rows>
        <cols>[federated.0x3pkch1s9vqu11c2rbw61wj9910].[avg:Hospital Beds Per 1000 People:qk]</cols>
      </table>
      <simple-id uuid='{39419102-1D2E-4944-801B-DEF1A8B09988}' />
    </worksheet>
    <worksheet name='Total deaths'>
      <table>
        <view>
          <datasources>
            <datasource caption='COVID19 Hackathon Dataset' name='federated.0x3pkch1s9vqu11c2rbw61wj9910' />
          </datasources>
          <datasource-dependencies datasource='federated.0x3pkch1s9vqu11c2rbw61wj9910'>
            <column datatype='string' name='[Continent]' role='dimension' type='nominal' />
            <column datatype='string' name='[Countries]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column caption='Political Stability' datatype='real' name='[Political_Stability]' role='measure' type='quantitative' />
            <column caption='Population Density' datatype='real' name='[Population_Density]' role='measure' type='quantitative' />
            <column caption='Rule of Law' datatype='real' name='[Rule_of_Law]' role='measure' type='quantitative' />
            <column caption='Total Deaths' datatype='integer' name='[Total_Deaths]' role='measure' type='quantitative' />
            <column caption='Women In Parliament' datatype='real' name='[Women_In_Parliament]' role='measure' type='quantitative' />
            <column-instance column='[Political_Stability]' derivation='Avg' name='[avg:Political_Stability:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Population_Density]' derivation='Avg' name='[avg:Population_Density:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Rule_of_Law]' derivation='Avg' name='[avg:Rule_of_Law:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Women_In_Parliament]' derivation='Avg' name='[avg:Women_In_Parliament:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Total_Deaths]' derivation='Max' name='[max:Total_Deaths:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Continent]' derivation='None' name='[none:Continent:nk]' pivot='key' type='nominal' />
            <column-instance column='[Countries]' derivation='None' name='[none:Countries:nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0x3pkch1s9vqu11c2rbw61wj9910].[none:Continent:nk]' filter-group='5'>
            <groupfilter function='level-members' level='[none:Continent:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.0x3pkch1s9vqu11c2rbw61wj9910].[none:Countries:nk]' filter-group='4'>
            <groupfilter function='level-members' level='[none:Countries:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <computed-sort column='[federated.0x3pkch1s9vqu11c2rbw61wj9910].[none:Countries:nk]' direction='DESC' using='[federated.0x3pkch1s9vqu11c2rbw61wj9910].[max:Total_Deaths:qk]' />
          <slices>
            <column>[federated.0x3pkch1s9vqu11c2rbw61wj9910].[none:Continent:nk]</column>
            <column>[federated.0x3pkch1s9vqu11c2rbw61wj9910].[none:Countries:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.0x3pkch1s9vqu11c2rbw61wj9910].[max:Total_Deaths:qk]' field-type='quantitative' scale='log' scope='rows' type='space' />
          </style-rule>
        </style>
        <panes>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <lod column='[federated.0x3pkch1s9vqu11c2rbw61wj9910].[none:Countries:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.0x3pkch1s9vqu11c2rbw61wj9910].[max:Total_Deaths:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <text column='[federated.0x3pkch1s9vqu11c2rbw61wj9910].[max:Total_Deaths:qk]' />
              <lod column='[federated.0x3pkch1s9vqu11c2rbw61wj9910].[none:Countries:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='false' />
                <format attr='mark-labels-mode' value='range' />
              </style-rule>
            </style>
          </pane>
          <pane id='3' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.0x3pkch1s9vqu11c2rbw61wj9910].[avg:Rule_of_Law:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <text column='[federated.0x3pkch1s9vqu11c2rbw61wj9910].[avg:Rule_of_Law:qk]' />
              <lod column='[federated.0x3pkch1s9vqu11c2rbw61wj9910].[none:Countries:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-color' value='#f1ce63' />
                <format attr='mark-labels-show' value='false' />
              </style-rule>
            </style>
          </pane>
          <pane id='4' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.0x3pkch1s9vqu11c2rbw61wj9910].[avg:Political_Stability:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <lod column='[federated.0x3pkch1s9vqu11c2rbw61wj9910].[none:Countries:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='false' />
                <format attr='mark-labels-mode' value='range' />
                <format attr='mark-labels-range-field' value='[federated.0x3pkch1s9vqu11c2rbw61wj9910].[avg:Political_Stability:qk]' />
              </style-rule>
            </style>
          </pane>
          <pane id='5' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.0x3pkch1s9vqu11c2rbw61wj9910].[avg:Population_Density:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <lod column='[federated.0x3pkch1s9vqu11c2rbw61wj9910].[none:Countries:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='false' />
                <format attr='mark-labels-mode' value='range' />
              </style-rule>
            </style>
          </pane>
          <pane id='6' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.0x3pkch1s9vqu11c2rbw61wj9910].[avg:Women_In_Parliament:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <lod column='[federated.0x3pkch1s9vqu11c2rbw61wj9910].[none:Countries:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='false' />
                <format attr='mark-labels-mode' value='range' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.0x3pkch1s9vqu11c2rbw61wj9910].[max:Total_Deaths:qk] + ([federated.0x3pkch1s9vqu11c2rbw61wj9910].[avg:Rule_of_Law:qk] + ([federated.0x3pkch1s9vqu11c2rbw61wj9910].[avg:Political_Stability:qk] + ([federated.0x3pkch1s9vqu11c2rbw61wj9910].[avg:Population_Density:qk] + [federated.0x3pkch1s9vqu11c2rbw61wj9910].[avg:Women_In_Parliament:qk]))))</rows>
        <cols>[federated.0x3pkch1s9vqu11c2rbw61wj9910].[none:Countries:nk]</cols>
        <annotations>
          <annotation class='point' id='0' mark-position='1' pullback='12' text-width='180'>
            <formatted-text>
              <run bold='true'>What??? Is this correct information even?</run>
            </formatted-text>
            <point>
              <visual-coordinate class='mark'>
                <tuple-reference>
                  <tuple-descriptor>
                    <pane-descriptor>
                      <x-fields>
                        <field>[federated.0x3pkch1s9vqu11c2rbw61wj9910].[none:Countries:nk]</field>
                      </x-fields>
                      <y-fields>
                        <field>[federated.0x3pkch1s9vqu11c2rbw61wj9910].[avg:Population_Density:qk]</field>
                      </y-fields>
                    </pane-descriptor>
                    <columns>
                      <field>[federated.0x3pkch1s9vqu11c2rbw61wj9910].[avg:Political_Stability:qk]</field>
                      <field>[federated.0x3pkch1s9vqu11c2rbw61wj9910].[avg:Population_Density:qk]</field>
                      <field>[federated.0x3pkch1s9vqu11c2rbw61wj9910].[avg:Rule_of_Law:qk]</field>
                      <field>[federated.0x3pkch1s9vqu11c2rbw61wj9910].[max:Total_Deaths:qk]</field>
                      <field>[federated.0x3pkch1s9vqu11c2rbw61wj9910].[none:Countries:nk]</field>
                    </columns>
                  </tuple-descriptor>
                  <tuple>
                    <value>1.6121019999999942</value>
                    <value>26300.0</value>
                    <value>%null%</value>
                    <value>1</value>
                    <value>&quot;Monaco&quot;</value>
                  </tuple>
                </tuple-reference>
              </visual-coordinate>
            </point>
            <body x='130' y='-20' />
          </annotation>
        </annotations>
      </table>
      <simple-id uuid='{698827BF-DE46-46A4-AE0A-B1C5526B9645}' />
    </worksheet>
    <worksheet name='Total deaths (2)'>
      <table>
        <view>
          <datasources>
            <datasource caption='COVID19 Hackathon Dataset' name='federated.0x3pkch1s9vqu11c2rbw61wj9910' />
          </datasources>
          <datasource-dependencies datasource='federated.0x3pkch1s9vqu11c2rbw61wj9910'>
            <column caption='(MAX([Total Deaths])/AVG([Population]))*100' datatype='real' name='[Calculation_1125336994045620231]' role='measure' type='quantitative' user:unnamed='Total deaths (2)'>
              <calculation class='tableau' formula='(MAX([Total_Deaths])/AVG([Population]))*100' />
            </column>
            <column caption='(MAX([Total Deaths])/AVG([Population]))*100' datatype='real' name='[Calculation_1125336994045702152]' role='measure' type='quantitative' user:unnamed='Total deaths (2)'>
              <calculation class='tableau' formula='(MAX([Total_Deaths])/AVG([Population]))*100' />
            </column>
            <column datatype='string' name='[Continent]' role='dimension' type='nominal' />
            <column datatype='string' name='[Countries]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column caption='Political Stability' datatype='real' name='[Political_Stability]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Population]' role='measure' type='quantitative' />
            <column caption='Population Density' datatype='real' name='[Population_Density]' role='measure' type='quantitative' />
            <column caption='Rule of Law' datatype='real' name='[Rule_of_Law]' role='measure' type='quantitative' />
            <column caption='Total Deaths' datatype='integer' name='[Total_Deaths]' role='measure' type='quantitative' />
            <column caption='Women In Parliament' datatype='real' name='[Women_In_Parliament]' role='measure' type='quantitative' />
            <column-instance column='[Political_Stability]' derivation='Avg' name='[avg:Political_Stability:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Population_Density]' derivation='Avg' name='[avg:Population_Density:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Rule_of_Law]' derivation='Avg' name='[avg:Rule_of_Law:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Women_In_Parliament]' derivation='Avg' name='[avg:Women_In_Parliament:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Total_Deaths]' derivation='Max' name='[max:Total_Deaths:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Continent]' derivation='None' name='[none:Continent:nk]' pivot='key' type='nominal' />
            <column-instance column='[Countries]' derivation='None' name='[none:Countries:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_1125336994045620231]' derivation='User' name='[usr:Calculation_1125336994045620231:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_1125336994045702152]' derivation='User' name='[usr:Calculation_1125336994045702152:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0x3pkch1s9vqu11c2rbw61wj9910].[none:Continent:nk]' filter-group='5'>
            <groupfilter function='level-members' level='[none:Continent:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.0x3pkch1s9vqu11c2rbw61wj9910].[none:Countries:nk]' filter-group='4'>
            <groupfilter function='level-members' level='[none:Countries:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <computed-sort column='[federated.0x3pkch1s9vqu11c2rbw61wj9910].[none:Countries:nk]' direction='DESC' using='[federated.0x3pkch1s9vqu11c2rbw61wj9910].[max:Total_Deaths:qk]' />
          <slices>
            <column>[federated.0x3pkch1s9vqu11c2rbw61wj9910].[none:Countries:nk]</column>
            <column>[federated.0x3pkch1s9vqu11c2rbw61wj9910].[none:Continent:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.0x3pkch1s9vqu11c2rbw61wj9910].[usr:Calculation_1125336994045620231:qk]' scope='rows' value='Death/100 people' />
          </style-rule>
        </style>
        <panes>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <lod column='[federated.0x3pkch1s9vqu11c2rbw61wj9910].[none:Countries:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.0x3pkch1s9vqu11c2rbw61wj9910].[usr:Calculation_1125336994045620231:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <text column='[federated.0x3pkch1s9vqu11c2rbw61wj9910].[usr:Calculation_1125336994045702152:qk]' />
              <lod column='[federated.0x3pkch1s9vqu11c2rbw61wj9910].[none:Countries:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='false' />
                <format attr='mark-labels-mode' value='range' />
              </style-rule>
            </style>
          </pane>
          <pane id='3' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.0x3pkch1s9vqu11c2rbw61wj9910].[avg:Rule_of_Law:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <text column='[federated.0x3pkch1s9vqu11c2rbw61wj9910].[avg:Rule_of_Law:qk]' />
              <lod column='[federated.0x3pkch1s9vqu11c2rbw61wj9910].[none:Countries:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-color' value='#f1ce63' />
                <format attr='mark-labels-show' value='false' />
              </style-rule>
            </style>
          </pane>
          <pane id='4' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.0x3pkch1s9vqu11c2rbw61wj9910].[avg:Political_Stability:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <lod column='[federated.0x3pkch1s9vqu11c2rbw61wj9910].[none:Countries:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='false' />
                <format attr='mark-labels-mode' value='range' />
                <format attr='mark-labels-range-field' value='[federated.0x3pkch1s9vqu11c2rbw61wj9910].[avg:Political_Stability:qk]' />
              </style-rule>
            </style>
          </pane>
          <pane id='5' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.0x3pkch1s9vqu11c2rbw61wj9910].[avg:Population_Density:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <lod column='[federated.0x3pkch1s9vqu11c2rbw61wj9910].[none:Countries:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='false' />
                <format attr='mark-labels-mode' value='range' />
              </style-rule>
            </style>
          </pane>
          <pane id='6' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.0x3pkch1s9vqu11c2rbw61wj9910].[avg:Women_In_Parliament:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <lod column='[federated.0x3pkch1s9vqu11c2rbw61wj9910].[none:Countries:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='false' />
                <format attr='mark-labels-mode' value='range' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.0x3pkch1s9vqu11c2rbw61wj9910].[usr:Calculation_1125336994045620231:qk] + ([federated.0x3pkch1s9vqu11c2rbw61wj9910].[avg:Rule_of_Law:qk] + ([federated.0x3pkch1s9vqu11c2rbw61wj9910].[avg:Political_Stability:qk] + ([federated.0x3pkch1s9vqu11c2rbw61wj9910].[avg:Population_Density:qk] + [federated.0x3pkch1s9vqu11c2rbw61wj9910].[avg:Women_In_Parliament:qk]))))</rows>
        <cols>[federated.0x3pkch1s9vqu11c2rbw61wj9910].[none:Countries:nk]</cols>
        <annotations>
          <annotation class='point' id='0' mark-position='1' pullback='12' text-width='180'>
            <formatted-text>
              <run bold='true'>What??? Is this correct information even?</run>
            </formatted-text>
            <point>
              <visual-coordinate class='mark'>
                <tuple-reference>
                  <tuple-descriptor>
                    <pane-descriptor>
                      <x-fields>
                        <field>[federated.0x3pkch1s9vqu11c2rbw61wj9910].[none:Countries:nk]</field>
                      </x-fields>
                      <y-fields>
                        <field>[federated.0x3pkch1s9vqu11c2rbw61wj9910].[avg:Population_Density:qk]</field>
                      </y-fields>
                    </pane-descriptor>
                    <columns>
                      <field>[federated.0x3pkch1s9vqu11c2rbw61wj9910].[avg:Political_Stability:qk]</field>
                      <field>[federated.0x3pkch1s9vqu11c2rbw61wj9910].[avg:Population_Density:qk]</field>
                      <field>[federated.0x3pkch1s9vqu11c2rbw61wj9910].[avg:Rule_of_Law:qk]</field>
                      <field>[federated.0x3pkch1s9vqu11c2rbw61wj9910].[max:Total_Deaths:qk]</field>
                      <field>[federated.0x3pkch1s9vqu11c2rbw61wj9910].[none:Countries:nk]</field>
                    </columns>
                  </tuple-descriptor>
                  <tuple>
                    <value>1.6121019999999942</value>
                    <value>26300.0</value>
                    <value>%null%</value>
                    <value>1</value>
                    <value>&quot;Monaco&quot;</value>
                  </tuple>
                </tuple-reference>
              </visual-coordinate>
            </point>
            <body x='130' y='-20' />
          </annotation>
        </annotations>
      </table>
      <simple-id uuid='{6492D5A6-ED88-46C7-9E60-232935D5FFCD}' />
    </worksheet>
    <worksheet name='avg weekly cases'>
      <table>
        <view>
          <datasources>
            <datasource caption='COVID19 Hackathon Dataset' name='federated.0x3pkch1s9vqu11c2rbw61wj9910' />
          </datasources>
          <datasource-dependencies datasource='federated.0x3pkch1s9vqu11c2rbw61wj9910'>
            <column datatype='string' name='[Countries]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='date' name='[Date]' role='dimension' type='ordinal' />
            <column caption='Weekly Cases' datatype='integer' name='[Weekly_Cases]' role='measure' type='quantitative' />
            <column-instance column='[Weekly_Cases]' derivation='Avg' name='[avg:Weekly_Cases:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Date]' derivation='Day' name='[dy:Date:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Date]' derivation='Month' name='[mn:Date:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Countries]' derivation='None' name='[none:Countries:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='Quarter' name='[qr:Date:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Date]' derivation='Year' name='[yr:Date:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0x3pkch1s9vqu11c2rbw61wj9910].[none:Countries:nk]'>
            <groupfilter from='&quot;Afghanistan&quot;' function='range' level='[none:Countries:nk]' to='&quot;Zimbabwe&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.0x3pkch1s9vqu11c2rbw61wj9910].[none:Countries:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='table'>
            <format attr='omit-on-special' field='[federated.0x3pkch1s9vqu11c2rbw61wj9910].[avg:Weekly_Cases:qk]' value='false' />
            <format attr='break-on-special' field='[federated.0x3pkch1s9vqu11c2rbw61wj9910].[avg:Weekly_Cases:qk]' value='false' />
            <format attr='show-null-value-warning' field='[federated.0x3pkch1s9vqu11c2rbw61wj9910].[avg:Weekly_Cases:qk]' value='false' />
          </style-rule>
        </style>
        <panes>
          <pane id='3' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <lod column='[federated.0x3pkch1s9vqu11c2rbw61wj9910].[none:Countries:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.0x3pkch1s9vqu11c2rbw61wj9910].[avg:Weekly_Cases:qk]</rows>
        <cols>([federated.0x3pkch1s9vqu11c2rbw61wj9910].[yr:Date:ok] / ([federated.0x3pkch1s9vqu11c2rbw61wj9910].[qr:Date:ok] / ([federated.0x3pkch1s9vqu11c2rbw61wj9910].[mn:Date:ok] / [federated.0x3pkch1s9vqu11c2rbw61wj9910].[dy:Date:ok])))</cols>
      </table>
      <simple-id uuid='{FD533A80-8885-4BFB-9B56-61BAD945D39E}' />
    </worksheet>
    <worksheet name='death rate vs smoking and avg beds'>
      <table>
        <view>
          <datasources>
            <datasource caption='COVID19 Hackathon Dataset' name='federated.0x3pkch1s9vqu11c2rbw61wj9910' />
          </datasources>
          <datasource-dependencies datasource='federated.0x3pkch1s9vqu11c2rbw61wj9910'>
            <column datatype='string' name='[Countries]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='real' name='[Death Rate Per 1000 (2017)]' role='measure' type='quantitative' />
            <column datatype='real' name='[Hospital Beds Per 1000 People]' role='measure' type='quantitative' />
            <column caption='Smoking Prevalence' datatype='real' name='[Smoking_Prevalence]' role='measure' type='quantitative' />
            <column-instance column='[Death Rate Per 1000 (2017)]' derivation='Avg' name='[avg:Death Rate Per 1000 (2017):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Hospital Beds Per 1000 People]' derivation='Avg' name='[avg:Hospital Beds Per 1000 People:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Smoking_Prevalence]' derivation='Avg' name='[avg:Smoking_Prevalence:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Countries]' derivation='None' name='[none:Countries:nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0x3pkch1s9vqu11c2rbw61wj9910].[none:Countries:nk]'>
            <groupfilter function='level-members' level='[none:Countries:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.0x3pkch1s9vqu11c2rbw61wj9910].[none:Countries:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <lod column='[federated.0x3pkch1s9vqu11c2rbw61wj9910].[none:Countries:nk]' />
            </encodings>
            <trendline enable-confidence-bands='false' enable-instant-analytics='true' enabled='true' exclude-color='false' exclude-intercept='false' fit='linear' />
          </pane>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow' x-axis-name='[federated.0x3pkch1s9vqu11c2rbw61wj9910].[avg:Hospital Beds Per 1000 People:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <lod column='[federated.0x3pkch1s9vqu11c2rbw61wj9910].[none:Countries:nk]' />
            </encodings>
            <trendline enable-confidence-bands='false' enable-instant-analytics='true' enabled='true' exclude-color='false' exclude-intercept='false' fit='linear' />
          </pane>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow' x-axis-name='[federated.0x3pkch1s9vqu11c2rbw61wj9910].[avg:Death Rate Per 1000 (2017):qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <lod column='[federated.0x3pkch1s9vqu11c2rbw61wj9910].[none:Countries:nk]' />
            </encodings>
            <trendline enable-confidence-bands='false' enable-instant-analytics='true' enabled='true' exclude-color='false' exclude-intercept='false' fit='linear' />
          </pane>
          <pane id='3' selection-relaxation-option='selection-relaxation-allow' x-axis-name='[federated.0x3pkch1s9vqu11c2rbw61wj9910].[avg:Smoking_Prevalence:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <lod column='[federated.0x3pkch1s9vqu11c2rbw61wj9910].[none:Countries:nk]' />
            </encodings>
            <trendline enable-confidence-bands='false' enable-instant-analytics='true' enabled='true' exclude-color='false' exclude-intercept='false' fit='linear' />
          </pane>
        </panes>
        <rows>([federated.0x3pkch1s9vqu11c2rbw61wj9910].[avg:Hospital Beds Per 1000 People:qk] + ([federated.0x3pkch1s9vqu11c2rbw61wj9910].[avg:Death Rate Per 1000 (2017):qk] + [federated.0x3pkch1s9vqu11c2rbw61wj9910].[avg:Smoking_Prevalence:qk]))</rows>
        <cols>([federated.0x3pkch1s9vqu11c2rbw61wj9910].[avg:Hospital Beds Per 1000 People:qk] + ([federated.0x3pkch1s9vqu11c2rbw61wj9910].[avg:Death Rate Per 1000 (2017):qk] + [federated.0x3pkch1s9vqu11c2rbw61wj9910].[avg:Smoking_Prevalence:qk]))</cols>
      </table>
      <simple-id uuid='{4A173C20-F879-4427-BE6E-B3A123900B13}' />
    </worksheet>
  </worksheets>
  <windows saved-dpi-scale-factor='1.25' source-height='37'>
    <window class='worksheet' name='death rate vs smoking and avg beds'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[federated.0x3pkch1s9vqu11c2rbw61wj9910].[none:Countries:nk]' type='filter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0x3pkch1s9vqu11c2rbw61wj9910].[none:Countries:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{ECA961C4-7171-40AE-884B-6AB02331D963}' />
    </window>
    <window class='worksheet' name='avg weekly cases'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='marks' />
            <card type='filters' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0x3pkch1s9vqu11c2rbw61wj9910].[none:Countries:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{CF6E48BF-1FCF-486B-951B-A00556165B4D}' />
    </window>
    <window class='worksheet' name='Death/100 vs govt healthcare budget'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[federated.0x3pkch1s9vqu11c2rbw61wj9910].[none:Continent:nk]' type='filter' />
            <card mode='dropdown' param='[federated.0x3pkch1s9vqu11c2rbw61wj9910].[none:Countries:nk]' type='filter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0x3pkch1s9vqu11c2rbw61wj9910].[none:Calculation_1125336994050367497:qk]</field>
            <field>[federated.0x3pkch1s9vqu11c2rbw61wj9910].[none:Calculation_1125336994050478090:qk]</field>
            <field>[federated.0x3pkch1s9vqu11c2rbw61wj9910].[none:Countries:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{ECAFCC88-C89B-475B-944E-D65B51BEFCA9}' />
    </window>
    <window class='worksheet' maximized='true' name='Total deaths'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[federated.0x3pkch1s9vqu11c2rbw61wj9910].[none:Countries:nk]' type='filter' />
            <card param='[federated.0x3pkch1s9vqu11c2rbw61wj9910].[none:Continent:nk]' type='filter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0x3pkch1s9vqu11c2rbw61wj9910].[none:Continent:nk]</field>
            <field>[federated.0x3pkch1s9vqu11c2rbw61wj9910].[none:Countries:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{FDE49A95-5F7F-4300-8CE1-C01D6FE8FD1C}' />
    </window>
    <window class='worksheet' name='Total deaths (2)'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0x3pkch1s9vqu11c2rbw61wj9910].[none:Calculation_1125336994043363330:qk]</field>
            <field>[federated.0x3pkch1s9vqu11c2rbw61wj9910].[none:Calculation_1125336994043789315:qk]</field>
            <field>[federated.0x3pkch1s9vqu11c2rbw61wj9910].[none:Calculation_1125336994043846660:qk]</field>
            <field>[federated.0x3pkch1s9vqu11c2rbw61wj9910].[none:Continent:nk]</field>
            <field>[federated.0x3pkch1s9vqu11c2rbw61wj9910].[none:Countries:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{3101944F-517D-4923-ACDF-EAA709C6FFA4}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Death/100 vs govt healthcare budget' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Total deaths' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Total deaths (2)' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='avg weekly cases' width='192'>
      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
      Ueemkwq+PuYAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='death rate vs smoking and avg beds' width='192'>
      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
      wC7wWM9HH/8PPyw5MgDglDMAAAAASUVORK5CYII=
    </thumbnail>
  </thumbnails>
</workbook>
