<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20203.20.0918.1727                               -->
<workbook original-version='18.1' source-build='2020.3.1 (20203.20.0918.1727)' source-platform='win' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <_.fcp.MarkAnimation.true...MarkAnimation />
    <_.fcp.ObjectModelEncapsulateLegacy.true...ObjectModelEncapsulateLegacy />
    <_.fcp.ObjectModelTableType.true...ObjectModelTableType />
    <_.fcp.SchemaViewerObjectModel.true...SchemaViewerObjectModel />
    <SheetIdentifierTracking />
    <SortTagCleanup />
    <WindowsPersistSimpleIdentifiers />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource hasconnection='false' inline='true' name='Parameters' version='18.1'>
      <aliases enabled='yes' />
      <column caption='Mortality rate Parameter' datatype='integer' name='[Mortality rate Parameter]' param-domain-type='range' role='measure' type='quantitative' value='2'>
        <calculation class='tableau' formula='2' />
        <range granularity='1' max='10' min='2' />
      </column>
    </datasource>
    <datasource caption='COVID19 Hackathon Dataset.csv+ (Multiple Connections)' inline='true' name='federated.1kgmjpz1fdvii81ewjjk80crvljl' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='COVID19 Hackathon Dataset' name='textscan.0cjb7ko0jyvx871er5rnk12eg61c'>
            <connection class='textscan' directory='C:/Users/debdu/Downloads' filename='COVID19 Hackathon Dataset.csv' password='' server='' />
          </named-connection>
          <named-connection caption='covid-containment-and-health-index' name='textscan.0htsalx1qcs2n21faptqu04hhv3i'>
            <connection class='textscan' directory='C:/Users/debdu/Documents/Job Canada/WID Hackathon Truecue' filename='covid-containment-and-health-index.csv' password='' server='' />
          </named-connection>
        </named-connections>
        <_.fcp.ObjectModelEncapsulateLegacy.false...relation join='inner' type='join'>
          <clause type='join'>
            <expression op='AND'>
              <expression op='='>
                <expression op='[COVID19 Hackathon Dataset.csv].[Date]' />
                <expression op='[covid-containment-and-health-index.csv].[Date]' />
              </expression>
              <expression op='='>
                <expression op='[COVID19 Hackathon Dataset.csv].[Country Code]' />
                <expression op='[covid-containment-and-health-index.csv].[Code]' />
              </expression>
            </expression>
          </clause>
          <relation connection='textscan.0cjb7ko0jyvx871er5rnk12eg61c' name='COVID19 Hackathon Dataset.csv' table='[COVID19 Hackathon Dataset#csv]' type='table'>
            <columns character-set='UTF-8' header='yes' locale='en_CA' separator=','>
              <column datatype='date' name='Date' ordinal='0' />
              <column datatype='string' name='Continent' ordinal='1' />
              <column datatype='string' name='Countries' ordinal='2' />
              <column datatype='integer' name='New_Cases' ordinal='3' />
              <column datatype='integer' name='New_Deaths' ordinal='4' />
              <column datatype='integer' name='Total_Cases' ordinal='5' />
              <column datatype='integer' name='Total_Deaths' ordinal='6' />
              <column datatype='integer' name='Weekly_Cases' ordinal='7' />
              <column datatype='integer' name='Weekly_Deaths' ordinal='8' />
              <column datatype='real' name='Population_Density' ordinal='9' />
              <column datatype='real' name='Fertility_Rate' ordinal='10' />
              <column datatype='integer' name='GDP_PPP' ordinal='11' />
              <column datatype='real' name='Corruption' ordinal='12' />
              <column datatype='real' name='Government_Effectiveness' ordinal='13' />
              <column datatype='real' name='Political_Stability' ordinal='14' />
              <column datatype='real' name='Rule_of_Law' ordinal='15' />
              <column datatype='real' name='Government_Healthcare_Spend' ordinal='16' />
              <column datatype='real' name='Urban_Population' ordinal='17' />
              <column datatype='real' name='Smoking_Prevalence' ordinal='18' />
              <column datatype='integer' name='Tourism' ordinal='19' />
              <column datatype='real' name='Women_In_Parliament' ordinal='20' />
              <column datatype='real' name='Obesity_Rate' ordinal='21' />
              <column datatype='integer' name='RunTot_New_Cases' ordinal='22' />
              <column datatype='integer' name='RunTot_New_Deaths' ordinal='23' />
              <column datatype='string' name='Country' ordinal='24' />
              <column datatype='string' name='Country Code' ordinal='25' />
              <column datatype='integer' name='Year' ordinal='26' />
              <column datatype='real' name='Diabetes Prevelance % of Population 20-79' ordinal='27' />
              <column datatype='integer' name='Labour Force Total' ordinal='28' />
              <column datatype='integer' name='Population' ordinal='29' />
              <column datatype='real' name='Population Aged 65 and above % of Total' ordinal='30' />
              <column datatype='integer' name='Urban Population' ordinal='31' />
              <column datatype='real' name='Death Rate Per 1000 (2017)' ordinal='32' />
              <column datatype='real' name='PM2.5 air pollution, mean annual exposure (micrograms per cubic meter) (2017)' ordinal='33' />
              <column datatype='real' name='PM2.5 air pollution, population exposed to levels exceeding WHO guideline value (% of total) (2017)' ordinal='34' />
              <column datatype='integer' name='Hospital Beds Year' ordinal='35' />
              <column datatype='real' name='Hospital Beds Per 1000 People' ordinal='36' />
            </columns>
          </relation>
          <relation connection='textscan.0htsalx1qcs2n21faptqu04hhv3i' name='covid-containment-and-health-index.csv' table='[covid-containment-and-health-index#csv]' type='table'>
            <columns character-set='UTF-8' header='yes' locale='en_CA' separator=','>
              <column datatype='string' name='Entity' ordinal='0' />
              <column datatype='string' name='Code' ordinal='1' />
              <column datatype='date' name='Date' ordinal='2' />
              <column datatype='real' name='Containment and Health Index (OxBSG)' ordinal='3' />
            </columns>
          </relation>
        </_.fcp.ObjectModelEncapsulateLegacy.false...relation>
        <_.fcp.ObjectModelEncapsulateLegacy.true...relation join='inner' type='join'>
          <clause type='join'>
            <expression op='AND'>
              <expression op='='>
                <expression op='[COVID19 Hackathon Dataset.csv].[Date]' />
                <expression op='[covid-containment-and-health-index.csv].[Date]' />
              </expression>
              <expression op='='>
                <expression op='[COVID19 Hackathon Dataset.csv].[Country Code]' />
                <expression op='[covid-containment-and-health-index.csv].[Code]' />
              </expression>
            </expression>
          </clause>
          <relation connection='textscan.0cjb7ko0jyvx871er5rnk12eg61c' name='COVID19 Hackathon Dataset.csv' table='[COVID19 Hackathon Dataset#csv]' type='table'>
            <columns character-set='UTF-8' header='yes' locale='en_CA' separator=','>
              <column datatype='date' name='Date' ordinal='0' />
              <column datatype='string' name='Continent' ordinal='1' />
              <column datatype='string' name='Countries' ordinal='2' />
              <column datatype='integer' name='New_Cases' ordinal='3' />
              <column datatype='integer' name='New_Deaths' ordinal='4' />
              <column datatype='integer' name='Total_Cases' ordinal='5' />
              <column datatype='integer' name='Total_Deaths' ordinal='6' />
              <column datatype='integer' name='Weekly_Cases' ordinal='7' />
              <column datatype='integer' name='Weekly_Deaths' ordinal='8' />
              <column datatype='real' name='Population_Density' ordinal='9' />
              <column datatype='real' name='Fertility_Rate' ordinal='10' />
              <column datatype='integer' name='GDP_PPP' ordinal='11' />
              <column datatype='real' name='Corruption' ordinal='12' />
              <column datatype='real' name='Government_Effectiveness' ordinal='13' />
              <column datatype='real' name='Political_Stability' ordinal='14' />
              <column datatype='real' name='Rule_of_Law' ordinal='15' />
              <column datatype='real' name='Government_Healthcare_Spend' ordinal='16' />
              <column datatype='real' name='Urban_Population' ordinal='17' />
              <column datatype='real' name='Smoking_Prevalence' ordinal='18' />
              <column datatype='integer' name='Tourism' ordinal='19' />
              <column datatype='real' name='Women_In_Parliament' ordinal='20' />
              <column datatype='real' name='Obesity_Rate' ordinal='21' />
              <column datatype='integer' name='RunTot_New_Cases' ordinal='22' />
              <column datatype='integer' name='RunTot_New_Deaths' ordinal='23' />
              <column datatype='string' name='Country' ordinal='24' />
              <column datatype='string' name='Country Code' ordinal='25' />
              <column datatype='integer' name='Year' ordinal='26' />
              <column datatype='real' name='Diabetes Prevelance % of Population 20-79' ordinal='27' />
              <column datatype='integer' name='Labour Force Total' ordinal='28' />
              <column datatype='integer' name='Population' ordinal='29' />
              <column datatype='real' name='Population Aged 65 and above % of Total' ordinal='30' />
              <column datatype='integer' name='Urban Population' ordinal='31' />
              <column datatype='real' name='Death Rate Per 1000 (2017)' ordinal='32' />
              <column datatype='real' name='PM2.5 air pollution, mean annual exposure (micrograms per cubic meter) (2017)' ordinal='33' />
              <column datatype='real' name='PM2.5 air pollution, population exposed to levels exceeding WHO guideline value (% of total) (2017)' ordinal='34' />
              <column datatype='integer' name='Hospital Beds Year' ordinal='35' />
              <column datatype='real' name='Hospital Beds Per 1000 People' ordinal='36' />
            </columns>
          </relation>
          <relation connection='textscan.0htsalx1qcs2n21faptqu04hhv3i' name='covid-containment-and-health-index.csv' table='[covid-containment-and-health-index#csv]' type='table'>
            <columns character-set='UTF-8' header='yes' locale='en_CA' separator=','>
              <column datatype='string' name='Entity' ordinal='0' />
              <column datatype='string' name='Code' ordinal='1' />
              <column datatype='date' name='Date' ordinal='2' />
              <column datatype='real' name='Containment and Health Index (OxBSG)' ordinal='3' />
            </columns>
          </relation>
        </_.fcp.ObjectModelEncapsulateLegacy.true...relation>
        <cols>
          <map key='[Code]' value='[covid-containment-and-health-index.csv].[Code]' />
          <map key='[Containment and Health Index (OxBSG)]' value='[covid-containment-and-health-index.csv].[Containment and Health Index (OxBSG)]' />
          <map key='[Continent]' value='[COVID19 Hackathon Dataset.csv].[Continent]' />
          <map key='[Corruption]' value='[COVID19 Hackathon Dataset.csv].[Corruption]' />
          <map key='[Countries]' value='[COVID19 Hackathon Dataset.csv].[Countries]' />
          <map key='[Country Code]' value='[COVID19 Hackathon Dataset.csv].[Country Code]' />
          <map key='[Country]' value='[COVID19 Hackathon Dataset.csv].[Country]' />
          <map key='[Date (covid-containment-and-health-index.csv)]' value='[covid-containment-and-health-index.csv].[Date]' />
          <map key='[Date]' value='[COVID19 Hackathon Dataset.csv].[Date]' />
          <map key='[Death Rate Per 1000 (2017)]' value='[COVID19 Hackathon Dataset.csv].[Death Rate Per 1000 (2017)]' />
          <map key='[Diabetes Prevelance % of Population 20-79]' value='[COVID19 Hackathon Dataset.csv].[Diabetes Prevelance % of Population 20-79]' />
          <map key='[Entity]' value='[covid-containment-and-health-index.csv].[Entity]' />
          <map key='[Fertility_Rate]' value='[COVID19 Hackathon Dataset.csv].[Fertility_Rate]' />
          <map key='[GDP_PPP]' value='[COVID19 Hackathon Dataset.csv].[GDP_PPP]' />
          <map key='[Government_Effectiveness]' value='[COVID19 Hackathon Dataset.csv].[Government_Effectiveness]' />
          <map key='[Government_Healthcare_Spend]' value='[COVID19 Hackathon Dataset.csv].[Government_Healthcare_Spend]' />
          <map key='[Hospital Beds Per 1000 People]' value='[COVID19 Hackathon Dataset.csv].[Hospital Beds Per 1000 People]' />
          <map key='[Hospital Beds Year]' value='[COVID19 Hackathon Dataset.csv].[Hospital Beds Year]' />
          <map key='[Labour Force Total]' value='[COVID19 Hackathon Dataset.csv].[Labour Force Total]' />
          <map key='[New_Cases]' value='[COVID19 Hackathon Dataset.csv].[New_Cases]' />
          <map key='[New_Deaths]' value='[COVID19 Hackathon Dataset.csv].[New_Deaths]' />
          <map key='[Obesity_Rate]' value='[COVID19 Hackathon Dataset.csv].[Obesity_Rate]' />
          <map key='[PM2.5 air pollution, mean annual exposure (micrograms per cubic meter) (2017)]' value='[COVID19 Hackathon Dataset.csv].[PM2.5 air pollution, mean annual exposure (micrograms per cubic meter) (2017)]' />
          <map key='[PM2.5 air pollution, population exposed to levels exceeding WHO guideline value (% of total) (2017)]' value='[COVID19 Hackathon Dataset.csv].[PM2.5 air pollution, population exposed to levels exceeding WHO guideline value (% of total) (2017)]' />
          <map key='[Political_Stability]' value='[COVID19 Hackathon Dataset.csv].[Political_Stability]' />
          <map key='[Population Aged 65 and above % of Total]' value='[COVID19 Hackathon Dataset.csv].[Population Aged 65 and above % of Total]' />
          <map key='[Population]' value='[COVID19 Hackathon Dataset.csv].[Population]' />
          <map key='[Population_Density]' value='[COVID19 Hackathon Dataset.csv].[Population_Density]' />
          <map key='[Rule_of_Law]' value='[COVID19 Hackathon Dataset.csv].[Rule_of_Law]' />
          <map key='[RunTot_New_Cases]' value='[COVID19 Hackathon Dataset.csv].[RunTot_New_Cases]' />
          <map key='[RunTot_New_Deaths]' value='[COVID19 Hackathon Dataset.csv].[RunTot_New_Deaths]' />
          <map key='[Smoking_Prevalence]' value='[COVID19 Hackathon Dataset.csv].[Smoking_Prevalence]' />
          <map key='[Total_Cases]' value='[COVID19 Hackathon Dataset.csv].[Total_Cases]' />
          <map key='[Total_Deaths]' value='[COVID19 Hackathon Dataset.csv].[Total_Deaths]' />
          <map key='[Tourism]' value='[COVID19 Hackathon Dataset.csv].[Tourism]' />
          <map key='[Urban Population]' value='[COVID19 Hackathon Dataset.csv].[Urban Population]' />
          <map key='[Urban_Population]' value='[COVID19 Hackathon Dataset.csv].[Urban_Population]' />
          <map key='[Weekly_Cases]' value='[COVID19 Hackathon Dataset.csv].[Weekly_Cases]' />
          <map key='[Weekly_Deaths]' value='[COVID19 Hackathon Dataset.csv].[Weekly_Deaths]' />
          <map key='[Women_In_Parliament]' value='[COVID19 Hackathon Dataset.csv].[Women_In_Parliament]' />
          <map key='[Year]' value='[COVID19 Hackathon Dataset.csv].[Year]' />
        </cols>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[COVID19 Hackathon Dataset.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_GB&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_CA&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[covid-containment-and-health-index.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_GB&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_CA&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Date</remote-name>
            <remote-type>133</remote-type>
            <local-name>[Date]</local-name>
            <parent-name>[COVID19 Hackathon Dataset.csv]</parent-name>
            <remote-alias>Date</remote-alias>
            <ordinal>0</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[COVID19 Hackathon Dataset.csv_83D5C347F5E546C78B745EF7F2B4960B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Continent</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Continent]</local-name>
            <parent-name>[COVID19 Hackathon Dataset.csv]</parent-name>
            <remote-alias>Continent</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[COVID19 Hackathon Dataset.csv_83D5C347F5E546C78B745EF7F2B4960B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Countries</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Countries]</local-name>
            <parent-name>[COVID19 Hackathon Dataset.csv]</parent-name>
            <remote-alias>Countries</remote-alias>
            <ordinal>2</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[COVID19 Hackathon Dataset.csv_83D5C347F5E546C78B745EF7F2B4960B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>New_Cases</remote-name>
            <remote-type>20</remote-type>
            <local-name>[New_Cases]</local-name>
            <parent-name>[COVID19 Hackathon Dataset.csv]</parent-name>
            <remote-alias>New_Cases</remote-alias>
            <ordinal>3</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[COVID19 Hackathon Dataset.csv_83D5C347F5E546C78B745EF7F2B4960B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>New_Deaths</remote-name>
            <remote-type>20</remote-type>
            <local-name>[New_Deaths]</local-name>
            <parent-name>[COVID19 Hackathon Dataset.csv]</parent-name>
            <remote-alias>New_Deaths</remote-alias>
            <ordinal>4</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[COVID19 Hackathon Dataset.csv_83D5C347F5E546C78B745EF7F2B4960B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Total_Cases</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Total_Cases]</local-name>
            <parent-name>[COVID19 Hackathon Dataset.csv]</parent-name>
            <remote-alias>Total_Cases</remote-alias>
            <ordinal>5</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[COVID19 Hackathon Dataset.csv_83D5C347F5E546C78B745EF7F2B4960B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Total_Deaths</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Total_Deaths]</local-name>
            <parent-name>[COVID19 Hackathon Dataset.csv]</parent-name>
            <remote-alias>Total_Deaths</remote-alias>
            <ordinal>6</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[COVID19 Hackathon Dataset.csv_83D5C347F5E546C78B745EF7F2B4960B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Weekly_Cases</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Weekly_Cases]</local-name>
            <parent-name>[COVID19 Hackathon Dataset.csv]</parent-name>
            <remote-alias>Weekly_Cases</remote-alias>
            <ordinal>7</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[COVID19 Hackathon Dataset.csv_83D5C347F5E546C78B745EF7F2B4960B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Weekly_Deaths</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Weekly_Deaths]</local-name>
            <parent-name>[COVID19 Hackathon Dataset.csv]</parent-name>
            <remote-alias>Weekly_Deaths</remote-alias>
            <ordinal>8</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[COVID19 Hackathon Dataset.csv_83D5C347F5E546C78B745EF7F2B4960B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Population_Density</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Population_Density]</local-name>
            <parent-name>[COVID19 Hackathon Dataset.csv]</parent-name>
            <remote-alias>Population_Density</remote-alias>
            <ordinal>9</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[COVID19 Hackathon Dataset.csv_83D5C347F5E546C78B745EF7F2B4960B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Fertility_Rate</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Fertility_Rate]</local-name>
            <parent-name>[COVID19 Hackathon Dataset.csv]</parent-name>
            <remote-alias>Fertility_Rate</remote-alias>
            <ordinal>10</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[COVID19 Hackathon Dataset.csv_83D5C347F5E546C78B745EF7F2B4960B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>GDP_PPP</remote-name>
            <remote-type>20</remote-type>
            <local-name>[GDP_PPP]</local-name>
            <parent-name>[COVID19 Hackathon Dataset.csv]</parent-name>
            <remote-alias>GDP_PPP</remote-alias>
            <ordinal>11</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[COVID19 Hackathon Dataset.csv_83D5C347F5E546C78B745EF7F2B4960B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Corruption</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Corruption]</local-name>
            <parent-name>[COVID19 Hackathon Dataset.csv]</parent-name>
            <remote-alias>Corruption</remote-alias>
            <ordinal>12</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[COVID19 Hackathon Dataset.csv_83D5C347F5E546C78B745EF7F2B4960B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Government_Effectiveness</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Government_Effectiveness]</local-name>
            <parent-name>[COVID19 Hackathon Dataset.csv]</parent-name>
            <remote-alias>Government_Effectiveness</remote-alias>
            <ordinal>13</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[COVID19 Hackathon Dataset.csv_83D5C347F5E546C78B745EF7F2B4960B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Political_Stability</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Political_Stability]</local-name>
            <parent-name>[COVID19 Hackathon Dataset.csv]</parent-name>
            <remote-alias>Political_Stability</remote-alias>
            <ordinal>14</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[COVID19 Hackathon Dataset.csv_83D5C347F5E546C78B745EF7F2B4960B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Rule_of_Law</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Rule_of_Law]</local-name>
            <parent-name>[COVID19 Hackathon Dataset.csv]</parent-name>
            <remote-alias>Rule_of_Law</remote-alias>
            <ordinal>15</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[COVID19 Hackathon Dataset.csv_83D5C347F5E546C78B745EF7F2B4960B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Government_Healthcare_Spend</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Government_Healthcare_Spend]</local-name>
            <parent-name>[COVID19 Hackathon Dataset.csv]</parent-name>
            <remote-alias>Government_Healthcare_Spend</remote-alias>
            <ordinal>16</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[COVID19 Hackathon Dataset.csv_83D5C347F5E546C78B745EF7F2B4960B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Urban_Population</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Urban_Population]</local-name>
            <parent-name>[COVID19 Hackathon Dataset.csv]</parent-name>
            <remote-alias>Urban_Population</remote-alias>
            <ordinal>17</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[COVID19 Hackathon Dataset.csv_83D5C347F5E546C78B745EF7F2B4960B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Smoking_Prevalence</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Smoking_Prevalence]</local-name>
            <parent-name>[COVID19 Hackathon Dataset.csv]</parent-name>
            <remote-alias>Smoking_Prevalence</remote-alias>
            <ordinal>18</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[COVID19 Hackathon Dataset.csv_83D5C347F5E546C78B745EF7F2B4960B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Tourism</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Tourism]</local-name>
            <parent-name>[COVID19 Hackathon Dataset.csv]</parent-name>
            <remote-alias>Tourism</remote-alias>
            <ordinal>19</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[COVID19 Hackathon Dataset.csv_83D5C347F5E546C78B745EF7F2B4960B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Women_In_Parliament</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Women_In_Parliament]</local-name>
            <parent-name>[COVID19 Hackathon Dataset.csv]</parent-name>
            <remote-alias>Women_In_Parliament</remote-alias>
            <ordinal>20</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[COVID19 Hackathon Dataset.csv_83D5C347F5E546C78B745EF7F2B4960B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Obesity_Rate</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Obesity_Rate]</local-name>
            <parent-name>[COVID19 Hackathon Dataset.csv]</parent-name>
            <remote-alias>Obesity_Rate</remote-alias>
            <ordinal>21</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[COVID19 Hackathon Dataset.csv_83D5C347F5E546C78B745EF7F2B4960B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>RunTot_New_Cases</remote-name>
            <remote-type>20</remote-type>
            <local-name>[RunTot_New_Cases]</local-name>
            <parent-name>[COVID19 Hackathon Dataset.csv]</parent-name>
            <remote-alias>RunTot_New_Cases</remote-alias>
            <ordinal>22</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[COVID19 Hackathon Dataset.csv_83D5C347F5E546C78B745EF7F2B4960B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>RunTot_New_Deaths</remote-name>
            <remote-type>20</remote-type>
            <local-name>[RunTot_New_Deaths]</local-name>
            <parent-name>[COVID19 Hackathon Dataset.csv]</parent-name>
            <remote-alias>RunTot_New_Deaths</remote-alias>
            <ordinal>23</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[COVID19 Hackathon Dataset.csv_83D5C347F5E546C78B745EF7F2B4960B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Country</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Country]</local-name>
            <parent-name>[COVID19 Hackathon Dataset.csv]</parent-name>
            <remote-alias>Country</remote-alias>
            <ordinal>24</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[COVID19 Hackathon Dataset.csv_83D5C347F5E546C78B745EF7F2B4960B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Country Code</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Country Code]</local-name>
            <parent-name>[COVID19 Hackathon Dataset.csv]</parent-name>
            <remote-alias>Country Code</remote-alias>
            <ordinal>25</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[COVID19 Hackathon Dataset.csv_83D5C347F5E546C78B745EF7F2B4960B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Year</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Year]</local-name>
            <parent-name>[COVID19 Hackathon Dataset.csv]</parent-name>
            <remote-alias>Year</remote-alias>
            <ordinal>26</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[COVID19 Hackathon Dataset.csv_83D5C347F5E546C78B745EF7F2B4960B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Diabetes Prevelance % of Population 20-79</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Diabetes Prevelance % of Population 20-79]</local-name>
            <parent-name>[COVID19 Hackathon Dataset.csv]</parent-name>
            <remote-alias>Diabetes Prevelance % of Population 20-79</remote-alias>
            <ordinal>27</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[COVID19 Hackathon Dataset.csv_83D5C347F5E546C78B745EF7F2B4960B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Labour Force Total</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Labour Force Total]</local-name>
            <parent-name>[COVID19 Hackathon Dataset.csv]</parent-name>
            <remote-alias>Labour Force Total</remote-alias>
            <ordinal>28</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[COVID19 Hackathon Dataset.csv_83D5C347F5E546C78B745EF7F2B4960B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Population</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Population]</local-name>
            <parent-name>[COVID19 Hackathon Dataset.csv]</parent-name>
            <remote-alias>Population</remote-alias>
            <ordinal>29</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[COVID19 Hackathon Dataset.csv_83D5C347F5E546C78B745EF7F2B4960B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Population Aged 65 and above % of Total</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Population Aged 65 and above % of Total]</local-name>
            <parent-name>[COVID19 Hackathon Dataset.csv]</parent-name>
            <remote-alias>Population Aged 65 and above % of Total</remote-alias>
            <ordinal>30</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[COVID19 Hackathon Dataset.csv_83D5C347F5E546C78B745EF7F2B4960B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Urban Population</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Urban Population]</local-name>
            <parent-name>[COVID19 Hackathon Dataset.csv]</parent-name>
            <remote-alias>Urban Population</remote-alias>
            <ordinal>31</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[COVID19 Hackathon Dataset.csv_83D5C347F5E546C78B745EF7F2B4960B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Death Rate Per 1000 (2017)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Death Rate Per 1000 (2017)]</local-name>
            <parent-name>[COVID19 Hackathon Dataset.csv]</parent-name>
            <remote-alias>Death Rate Per 1000 (2017)</remote-alias>
            <ordinal>32</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[COVID19 Hackathon Dataset.csv_83D5C347F5E546C78B745EF7F2B4960B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>PM2.5 air pollution, mean annual exposure (micrograms per cubic meter) (2017)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[PM2.5 air pollution, mean annual exposure (micrograms per cubic meter) (2017)]</local-name>
            <parent-name>[COVID19 Hackathon Dataset.csv]</parent-name>
            <remote-alias>PM2.5 air pollution, mean annual exposure (micrograms per cubic meter) (2017)</remote-alias>
            <ordinal>33</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[COVID19 Hackathon Dataset.csv_83D5C347F5E546C78B745EF7F2B4960B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>PM2.5 air pollution, population exposed to levels exceeding WHO guideline value (% of total) (2017)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[PM2.5 air pollution, population exposed to levels exceeding WHO guideline value (% of total) (2017)]</local-name>
            <parent-name>[COVID19 Hackathon Dataset.csv]</parent-name>
            <remote-alias>PM2.5 air pollution, population exposed to levels exceeding WHO guideline value (% of total) (2017)</remote-alias>
            <ordinal>34</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[COVID19 Hackathon Dataset.csv_83D5C347F5E546C78B745EF7F2B4960B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Hospital Beds Year</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Hospital Beds Year]</local-name>
            <parent-name>[COVID19 Hackathon Dataset.csv]</parent-name>
            <remote-alias>Hospital Beds Year</remote-alias>
            <ordinal>35</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[COVID19 Hackathon Dataset.csv_83D5C347F5E546C78B745EF7F2B4960B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Hospital Beds Per 1000 People</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Hospital Beds Per 1000 People]</local-name>
            <parent-name>[COVID19 Hackathon Dataset.csv]</parent-name>
            <remote-alias>Hospital Beds Per 1000 People</remote-alias>
            <ordinal>36</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[COVID19 Hackathon Dataset.csv_83D5C347F5E546C78B745EF7F2B4960B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Entity</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Entity]</local-name>
            <parent-name>[covid-containment-and-health-index.csv]</parent-name>
            <remote-alias>Entity</remote-alias>
            <ordinal>37</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[COVID19 Hackathon Dataset.csv_83D5C347F5E546C78B745EF7F2B4960B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Code</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Code]</local-name>
            <parent-name>[covid-containment-and-health-index.csv]</parent-name>
            <remote-alias>Code</remote-alias>
            <ordinal>38</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[COVID19 Hackathon Dataset.csv_83D5C347F5E546C78B745EF7F2B4960B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Date</remote-name>
            <remote-type>133</remote-type>
            <local-name>[Date (covid-containment-and-health-index.csv)]</local-name>
            <parent-name>[covid-containment-and-health-index.csv]</parent-name>
            <remote-alias>Date</remote-alias>
            <ordinal>39</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[COVID19 Hackathon Dataset.csv_83D5C347F5E546C78B745EF7F2B4960B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Containment and Health Index (OxBSG)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Containment and Health Index (OxBSG)]</local-name>
            <parent-name>[covid-containment-and-health-index.csv]</parent-name>
            <remote-alias>Containment and Health Index (OxBSG)</remote-alias>
            <ordinal>40</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[COVID19 Hackathon Dataset.csv_83D5C347F5E546C78B745EF7F2B4960B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='Fatality rate' datatype='real' name='[Calculation_1376975624905904128]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='max([Total_Deaths])/max([Total_Cases])*100' />
      </column>
      <column caption='Mortality' datatype='real' name='[Calculation_1376975624931659780]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='(max([Total_Deaths])/avg([Population]))*10000' />
      </column>
      <column caption='index' datatype='integer' name='[Calculation_1376975624990117904]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='index()'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='Population groups' datatype='string' name='[Calculation_1376975624991031315]' role='measure' type='nominal'>
        <calculation class='tableau' formula='if [Calculation_1376975624990117904] &gt;=1 AND [Calculation_1376975624990117904] &lt;=20&#13;&#10;then &apos;Group A&apos;&#13;&#10;elseif [Calculation_1376975624990117904] &gt;=21 AND [Calculation_1376975624990117904] &lt;=40&#13;&#10;then &apos;Group B&apos;&#13;&#10;elseif [Calculation_1376975624990117904] &gt;=41 AND [Calculation_1376975624990117904] &lt;=60&#13;&#10;then &apos;Group C&apos;&#13;&#10;elseif [Calculation_1376975624990117904] &gt;=61 AND [Calculation_1376975624990117904] &lt;=80&#13;&#10;then &apos;Group D&apos;&#13;&#10;elseif [Calculation_1376975624990117904] &gt;=81 AND [Calculation_1376975624990117904] &lt;=100&#13;&#10;then &apos;Group E&apos;&#13;&#10;elseif [Calculation_1376975624990117904] &gt;=101 AND [Calculation_1376975624990117904] &lt;=120&#13;&#10;then &apos;Group F&apos;&#13;&#10;elseif [Calculation_1376975624990117904] &gt;=121 AND [Calculation_1376975624990117904] &lt;=140&#13;&#10;then &apos;Group G&apos;&#13;&#10;elseif [Calculation_1376975624990117904] &gt;=141 AND [Calculation_1376975624990117904] &lt;=160&#13;&#10;then &apos;Group H&apos;&#13;&#10;elseif [Calculation_1376975624990117904] &gt;=161 &#13;&#10;then &apos;Group I&apos;&#13;&#10;END'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column datatype='real' name='[Containment and Health Index (OxBSG)]' role='measure' type='quantitative' />
      <column datatype='string' name='[Countries]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column datatype='string' name='[Country Code]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column caption='Fertility Rate' datatype='real' name='[Fertility_Rate]' role='measure' type='quantitative' />
      <column caption='Gdp Ppp' datatype='integer' name='[GDP_PPP]' role='measure' type='quantitative' />
      <column caption='Government Effectiveness' datatype='real' name='[Government_Effectiveness]' role='measure' type='quantitative' />
      <column caption='Government Healthcare Spend' datatype='real' name='[Government_Healthcare_Spend]' role='measure' type='quantitative' />
      <column caption='New Cases' datatype='integer' name='[New_Cases]' role='measure' type='quantitative' />
      <column caption='New Deaths' datatype='integer' name='[New_Deaths]' role='measure' type='quantitative' />
      <column caption='Obesity Rate' datatype='real' name='[Obesity_Rate]' role='measure' type='quantitative' />
      <column caption='Political Stability' datatype='real' name='[Political_Stability]' role='measure' type='quantitative' />
      <column caption='Population (bin) 2' datatype='integer' name='[Population (bin) 2]' role='dimension' type='ordinal'>
        <calculation class='bin' decimals='4' formula='[Population]' peg='0' size='5e+07' />
      </column>
      <column aggregation='None' caption='Population (bin)' datatype='integer' name='[Population (bin)]' role='dimension' type='ordinal'>
        <calculation class='bin' decimals='4' formula='[Population]' peg='0' size='5e+07' />
      </column>
      <column datatype='integer' name='[Population]' role='measure' type='quantitative' />
      <column caption='Population Density' datatype='real' name='[Population_Density]' role='measure' type='quantitative' />
      <column caption='Rule of Law' datatype='real' name='[Rule_of_Law]' role='measure' type='quantitative' />
      <column caption='RunTot New Cases' datatype='integer' name='[RunTot_New_Cases]' role='measure' type='quantitative' />
      <column caption='RunTot New Deaths' datatype='integer' name='[RunTot_New_Deaths]' role='measure' type='quantitative' />
      <column caption='Smoking Prevalence' datatype='real' name='[Smoking_Prevalence]' role='measure' type='quantitative' />
      <column caption='Total Cases' datatype='integer' name='[Total_Cases]' role='measure' type='quantitative' />
      <column caption='Total Deaths' datatype='integer' name='[Total_Deaths]' role='measure' type='quantitative' />
      <column caption='Urban Population1' datatype='real' name='[Urban_Population]' role='measure' type='quantitative' />
      <column caption='Weekly Cases' datatype='integer' name='[Weekly_Cases]' role='measure' type='quantitative' />
      <column caption='Weekly Deaths' datatype='integer' name='[Weekly_Deaths]' role='measure' type='quantitative' />
      <column caption='Women In Parliament' datatype='real' name='[Women_In_Parliament]' role='measure' type='quantitative' />
      <column datatype='integer' name='[Year]' role='dimension' type='quantitative' />
      <_.fcp.ObjectModelTableType.true...column caption='COVID19 Hackathon Dataset.csv' datatype='table' name='[__tableau_internal_object_id__].[COVID19 Hackathon Dataset.csv_83D5C347F5E546C78B745EF7F2B4960B]' role='measure' type='quantitative' />
      <column-instance column='[Containment and Health Index (OxBSG)]' derivation='Avg' name='[avg:Containment and Health Index (OxBSG):qk]' pivot='key' type='quantitative' />
      <column-instance column='[Total_Deaths]' derivation='Max' name='[diff:max:Total_Deaths:qk]' pivot='key' type='quantitative'>
        <table-calc diff-options='Relative' ordering-type='Rows' type='Difference'>
          <address>
            <value>-1</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[Countries Set]' derivation='InOut' name='[io:Countries Set:nk]' pivot='key' type='nominal' />
      <column-instance column='[Total_Deaths]' derivation='Max' name='[max:Total_Deaths:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Calculation_1376975624905904128]' derivation='User' name='[usr:Calculation_1376975624905904128:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Calculation_1376975624931659780]' derivation='User' name='[usr:Calculation_1376975624931659780:qk]' pivot='key' type='quantitative' />
      <group caption='Top 10 Countries by total population' name='[Countries Set]' name-style='unqualified' user:ui-builder='filter-group'>
        <groupfilter count='10' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
          <groupfilter direction='DESC' expression='AVG([Population])' function='order' user:ui-marker='order'>
            <groupfilter function='level-members' level='[Countries]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </groupfilter>
        </groupfilter>
      </group>
      <group caption='Countries population' name='[Countries population]' name-style='unqualified' user:ui-builder='filter-group'>
        <groupfilter function='empty-level' member='[Countries]' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
      </group>
      <group caption='Top 10 Countries By Total Death' name='[Top 10 Countries By Mortality Rate]' name-style='unqualified' user:ui-builder='filter-group'>
        <groupfilter count='10' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
          <groupfilter direction='DESC' expression='AVG([Total_Deaths])' function='order' user:ui-marker='order'>
            <groupfilter function='level-members' level='[Countries]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </groupfilter>
        </groupfilter>
      </group>
      <group caption='Top 10 Countries Fatality' name='[Top 10 Countries Mortality]' name-style='unqualified' user:ui-builder='filter-group'>
        <groupfilter count='10' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
          <groupfilter direction='DESC' expression='[Calculation_1376975624905904128]' function='order' user:ui-marker='order'>
            <groupfilter function='level-members' level='[Countries]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </groupfilter>
        </groupfilter>
      </group>
      <layout _.fcp.SchemaViewerObjectModel.false...dim-percentage='0.5' _.fcp.SchemaViewerObjectModel.false...measure-percentage='0.4' dim-ordering='alphabetic' measure-ordering='alphabetic' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[io:Countries Set:nk]' type='palette'>
            <map to='#4e79a7'>
              <bucket>true</bucket>
            </map>
            <map to='#a2a2a2'>
              <bucket>false</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[:Measure Names]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1kgmjpz1fdvii81ewjjk80crvljl].[avg:Containment and Health Index (OxBSG):qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.1kgmjpz1fdvii81ewjjk80crvljl].[diff:max:Total_Deaths:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.1kgmjpz1fdvii81ewjjk80crvljl].[max:Total_Deaths:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.1kgmjpz1fdvii81ewjjk80crvljl].[none:Calculation_1376975624931143682:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.1kgmjpz1fdvii81ewjjk80crvljl].[usr:Calculation_1376975624931196931:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.1kgmjpz1fdvii81ewjjk80crvljl].[usr:Calculation_1376975624931659780:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1kgmjpz1fdvii81ewjjk80crvljl].[usr:Calculation_1376975624905904128:qk]&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;Canada&quot;' />
      </semantic-values>
      <_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
        <objects>
          <object caption='COVID19 Hackathon Dataset.csv' id='COVID19 Hackathon Dataset.csv_83D5C347F5E546C78B745EF7F2B4960B'>
            <properties context=''>
              <relation join='inner' type='join'>
                <clause type='join'>
                  <expression op='AND'>
                    <expression op='='>
                      <expression op='[COVID19 Hackathon Dataset.csv].[Date]' />
                      <expression op='[covid-containment-and-health-index.csv].[Date]' />
                    </expression>
                    <expression op='='>
                      <expression op='[COVID19 Hackathon Dataset.csv].[Country Code]' />
                      <expression op='[covid-containment-and-health-index.csv].[Code]' />
                    </expression>
                  </expression>
                </clause>
                <relation connection='textscan.0cjb7ko0jyvx871er5rnk12eg61c' name='COVID19 Hackathon Dataset.csv' table='[COVID19 Hackathon Dataset#csv]' type='table'>
                  <columns character-set='UTF-8' header='yes' locale='en_CA' separator=','>
                    <column datatype='date' name='Date' ordinal='0' />
                    <column datatype='string' name='Continent' ordinal='1' />
                    <column datatype='string' name='Countries' ordinal='2' />
                    <column datatype='integer' name='New_Cases' ordinal='3' />
                    <column datatype='integer' name='New_Deaths' ordinal='4' />
                    <column datatype='integer' name='Total_Cases' ordinal='5' />
                    <column datatype='integer' name='Total_Deaths' ordinal='6' />
                    <column datatype='integer' name='Weekly_Cases' ordinal='7' />
                    <column datatype='integer' name='Weekly_Deaths' ordinal='8' />
                    <column datatype='real' name='Population_Density' ordinal='9' />
                    <column datatype='real' name='Fertility_Rate' ordinal='10' />
                    <column datatype='integer' name='GDP_PPP' ordinal='11' />
                    <column datatype='real' name='Corruption' ordinal='12' />
                    <column datatype='real' name='Government_Effectiveness' ordinal='13' />
                    <column datatype='real' name='Political_Stability' ordinal='14' />
                    <column datatype='real' name='Rule_of_Law' ordinal='15' />
                    <column datatype='real' name='Government_Healthcare_Spend' ordinal='16' />
                    <column datatype='real' name='Urban_Population' ordinal='17' />
                    <column datatype='real' name='Smoking_Prevalence' ordinal='18' />
                    <column datatype='integer' name='Tourism' ordinal='19' />
                    <column datatype='real' name='Women_In_Parliament' ordinal='20' />
                    <column datatype='real' name='Obesity_Rate' ordinal='21' />
                    <column datatype='integer' name='RunTot_New_Cases' ordinal='22' />
                    <column datatype='integer' name='RunTot_New_Deaths' ordinal='23' />
                    <column datatype='string' name='Country' ordinal='24' />
                    <column datatype='string' name='Country Code' ordinal='25' />
                    <column datatype='integer' name='Year' ordinal='26' />
                    <column datatype='real' name='Diabetes Prevelance % of Population 20-79' ordinal='27' />
                    <column datatype='integer' name='Labour Force Total' ordinal='28' />
                    <column datatype='integer' name='Population' ordinal='29' />
                    <column datatype='real' name='Population Aged 65 and above % of Total' ordinal='30' />
                    <column datatype='integer' name='Urban Population' ordinal='31' />
                    <column datatype='real' name='Death Rate Per 1000 (2017)' ordinal='32' />
                    <column datatype='real' name='PM2.5 air pollution, mean annual exposure (micrograms per cubic meter) (2017)' ordinal='33' />
                    <column datatype='real' name='PM2.5 air pollution, population exposed to levels exceeding WHO guideline value (% of total) (2017)' ordinal='34' />
                    <column datatype='integer' name='Hospital Beds Year' ordinal='35' />
                    <column datatype='real' name='Hospital Beds Per 1000 People' ordinal='36' />
                  </columns>
                </relation>
                <relation connection='textscan.0htsalx1qcs2n21faptqu04hhv3i' name='covid-containment-and-health-index.csv' table='[covid-containment-and-health-index#csv]' type='table'>
                  <columns character-set='UTF-8' header='yes' locale='en_CA' separator=','>
                    <column datatype='string' name='Entity' ordinal='0' />
                    <column datatype='string' name='Code' ordinal='1' />
                    <column datatype='date' name='Date' ordinal='2' />
                    <column datatype='real' name='Containment and Health Index (OxBSG)' ordinal='3' />
                  </columns>
                </relation>
              </relation>
            </properties>
          </object>
        </objects>
      </_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
    </datasource>
  </datasources>
  <worksheets>
    <worksheet name='Country groups'>
      <table>
        <view>
          <datasources>
            <datasource caption='COVID19 Hackathon Dataset.csv+ (Multiple Connections)' name='federated.1kgmjpz1fdvii81ewjjk80crvljl' />
          </datasources>
          <datasource-dependencies datasource='federated.1kgmjpz1fdvii81ewjjk80crvljl'>
            <column caption='index' datatype='integer' name='[Calculation_1376975624990117904]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='index()'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column caption='Population groups' datatype='string' name='[Calculation_1376975624991031315]' role='measure' type='nominal'>
              <calculation class='tableau' formula='if [Calculation_1376975624990117904] &gt;=1 AND [Calculation_1376975624990117904] &lt;=20&#13;&#10;then &apos;Group A&apos;&#13;&#10;elseif [Calculation_1376975624990117904] &gt;=21 AND [Calculation_1376975624990117904] &lt;=40&#13;&#10;then &apos;Group B&apos;&#13;&#10;elseif [Calculation_1376975624990117904] &gt;=41 AND [Calculation_1376975624990117904] &lt;=60&#13;&#10;then &apos;Group C&apos;&#13;&#10;elseif [Calculation_1376975624990117904] &gt;=61 AND [Calculation_1376975624990117904] &lt;=80&#13;&#10;then &apos;Group D&apos;&#13;&#10;elseif [Calculation_1376975624990117904] &gt;=81 AND [Calculation_1376975624990117904] &lt;=100&#13;&#10;then &apos;Group E&apos;&#13;&#10;elseif [Calculation_1376975624990117904] &gt;=101 AND [Calculation_1376975624990117904] &lt;=120&#13;&#10;then &apos;Group F&apos;&#13;&#10;elseif [Calculation_1376975624990117904] &gt;=121 AND [Calculation_1376975624990117904] &lt;=140&#13;&#10;then &apos;Group G&apos;&#13;&#10;elseif [Calculation_1376975624990117904] &gt;=141 AND [Calculation_1376975624990117904] &lt;=160&#13;&#10;then &apos;Group H&apos;&#13;&#10;elseif [Calculation_1376975624990117904] &gt;=161 &#13;&#10;then &apos;Group I&apos;&#13;&#10;END'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column datatype='string' name='[Countries]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='integer' name='[Population]' role='measure' type='quantitative' />
            <column-instance column='[Population]' derivation='Avg' name='[avg:Population:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Countries]' derivation='None' name='[none:Countries:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_1376975624990117904]' derivation='User' name='[usr:Calculation_1376975624990117904:ok]' pivot='key' type='ordinal'>
              <table-calc ordering-type='Columns' />
            </column-instance>
            <column-instance column='[Calculation_1376975624991031315]' derivation='User' name='[usr:Calculation_1376975624991031315:nk:2]' pivot='key' type='nominal'>
              <table-calc ordering-type='Columns' />
              <table-calc field='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[Calculation_1376975624990117904]' ordering-type='Columns' />
            </column-instance>
          </datasource-dependencies>
          <manual-sort column='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[none:Countries:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;China&quot;</bucket>
              <bucket>&quot;India&quot;</bucket>
              <bucket>&quot;United States&quot;</bucket>
              <bucket>&quot;Indonesia&quot;</bucket>
              <bucket>&quot;Pakistan&quot;</bucket>
              <bucket>&quot;Brazil&quot;</bucket>
              <bucket>&quot;Nigeria&quot;</bucket>
              <bucket>&quot;Bangladesh&quot;</bucket>
              <bucket>&quot;Russia&quot;</bucket>
              <bucket>&quot;Mexico&quot;</bucket>
              <bucket>&quot;Japan&quot;</bucket>
              <bucket>&quot;Ethiopia&quot;</bucket>
              <bucket>&quot;Philippines&quot;</bucket>
              <bucket>&quot;Egypt&quot;</bucket>
              <bucket>&quot;Vietnam&quot;</bucket>
              <bucket>&quot;Congo, Dem. Rep.&quot;</bucket>
              <bucket>&quot;Turkey&quot;</bucket>
              <bucket>&quot;Germany&quot;</bucket>
              <bucket>&quot;Iran&quot;</bucket>
              <bucket>&quot;Thailand&quot;</bucket>
              <bucket>&quot;France&quot;</bucket>
              <bucket>&quot;United Kingdom&quot;</bucket>
              <bucket>&quot;Italy&quot;</bucket>
              <bucket>&quot;Tanzania&quot;</bucket>
              <bucket>&quot;South Africa&quot;</bucket>
              <bucket>&quot;Myanmar&quot;</bucket>
              <bucket>&quot;Kenya&quot;</bucket>
              <bucket>&quot;Colombia&quot;</bucket>
              <bucket>&quot;South Korea&quot;</bucket>
              <bucket>&quot;Spain&quot;</bucket>
              <bucket>&quot;Argentina&quot;</bucket>
              <bucket>&quot;Ukraine&quot;</bucket>
              <bucket>&quot;Uganda&quot;</bucket>
              <bucket>&quot;Algeria&quot;</bucket>
              <bucket>&quot;Sudan&quot;</bucket>
              <bucket>&quot;Iraq&quot;</bucket>
              <bucket>&quot;Afghanistan&quot;</bucket>
              <bucket>&quot;Poland&quot;</bucket>
              <bucket>&quot;Canada&quot;</bucket>
              <bucket>&quot;Morocco&quot;</bucket>
              <bucket>&quot;Saudi Arabia&quot;</bucket>
              <bucket>&quot;Uzbekistan&quot;</bucket>
              <bucket>&quot;Peru&quot;</bucket>
              <bucket>&quot;Malaysia&quot;</bucket>
              <bucket>&quot;Angola&quot;</bucket>
              <bucket>&quot;Ghana&quot;</bucket>
              <bucket>&quot;Mozambique&quot;</bucket>
              <bucket>&quot;Yemen&quot;</bucket>
              <bucket>&quot;Nepal&quot;</bucket>
              <bucket>&quot;Venezuela&quot;</bucket>
              <bucket>&quot;Madagascar&quot;</bucket>
              <bucket>&quot;Cameroon&quot;</bucket>
              <bucket>&quot;Cote d&apos;Ivoire&quot;</bucket>
              <bucket>&quot;Australia&quot;</bucket>
              <bucket>&quot;Niger&quot;</bucket>
              <bucket>&quot;Sri Lanka&quot;</bucket>
              <bucket>&quot;Burkina Faso&quot;</bucket>
              <bucket>&quot;Mali&quot;</bucket>
              <bucket>&quot;Romania&quot;</bucket>
              <bucket>&quot;Chile&quot;</bucket>
              <bucket>&quot;Malawi&quot;</bucket>
              <bucket>&quot;Kazakhstan&quot;</bucket>
              <bucket>&quot;Zambia&quot;</bucket>
              <bucket>&quot;Ecuador&quot;</bucket>
              <bucket>&quot;Netherlands&quot;</bucket>
              <bucket>&quot;Syria&quot;</bucket>
              <bucket>&quot;Guatemala&quot;</bucket>
              <bucket>&quot;Cambodia&quot;</bucket>
              <bucket>&quot;Senegal&quot;</bucket>
              <bucket>&quot;Chad&quot;</bucket>
              <bucket>&quot;Somalia&quot;</bucket>
              <bucket>&quot;Zimbabwe&quot;</bucket>
              <bucket>&quot;Guinea&quot;</bucket>
              <bucket>&quot;Rwanda&quot;</bucket>
              <bucket>&quot;Benin&quot;</bucket>
              <bucket>&quot;Tunisia&quot;</bucket>
              <bucket>&quot;Burundi&quot;</bucket>
              <bucket>&quot;Bolivia&quot;</bucket>
              <bucket>&quot;Belgium&quot;</bucket>
              <bucket>&quot;Cuba&quot;</bucket>
              <bucket>&quot;Haiti&quot;</bucket>
              <bucket>&quot;Dominican Republic&quot;</bucket>
              <bucket>&quot;Greece&quot;</bucket>
              <bucket>&quot;Czech Republic&quot;</bucket>
              <bucket>&quot;Sweden&quot;</bucket>
              <bucket>&quot;Portugal&quot;</bucket>
              <bucket>&quot;Jordan&quot;</bucket>
              <bucket>&quot;Azerbaijan&quot;</bucket>
              <bucket>&quot;United Arab Emirates&quot;</bucket>
              <bucket>&quot;Hungary&quot;</bucket>
              <bucket>&quot;Honduras&quot;</bucket>
              <bucket>&quot;Belarus&quot;</bucket>
              <bucket>&quot;Tajikistan&quot;</bucket>
              <bucket>&quot;Israel&quot;</bucket>
              <bucket>&quot;Austria&quot;</bucket>
              <bucket>&quot;Switzerland&quot;</bucket>
              <bucket>&quot;Togo&quot;</bucket>
              <bucket>&quot;Sierra Leone&quot;</bucket>
              <bucket>&quot;Lao&quot;</bucket>
              <bucket>&quot;Paraguay&quot;</bucket>
              <bucket>&quot;Bulgaria&quot;</bucket>
              <bucket>&quot;Serbia&quot;</bucket>
              <bucket>&quot;Lebanon&quot;</bucket>
              <bucket>&quot;Libya&quot;</bucket>
              <bucket>&quot;Nicaragua&quot;</bucket>
              <bucket>&quot;Kyrgyz Republic&quot;</bucket>
              <bucket>&quot;El Salvador&quot;</bucket>
              <bucket>&quot;Denmark&quot;</bucket>
              <bucket>&quot;Singapore&quot;</bucket>
              <bucket>&quot;Finland&quot;</bucket>
              <bucket>&quot;Slovak Republic&quot;</bucket>
              <bucket>&quot;Congo, Rep.&quot;</bucket>
              <bucket>&quot;Norway&quot;</bucket>
              <bucket>&quot;Costa Rica&quot;</bucket>
              <bucket>&quot;Oman&quot;</bucket>
              <bucket>&quot;Ireland&quot;</bucket>
              <bucket>&quot;Liberia&quot;</bucket>
              <bucket>&quot;New Zealand&quot;</bucket>
              <bucket>&quot;Central African Republic&quot;</bucket>
              <bucket>&quot;Mauritania&quot;</bucket>
              <bucket>&quot;Panama&quot;</bucket>
              <bucket>&quot;Kuwait&quot;</bucket>
              <bucket>&quot;Croatia&quot;</bucket>
              <bucket>&quot;Georgia&quot;</bucket>
              <bucket>&quot;Uruguay&quot;</bucket>
              <bucket>&quot;Bosnia and Herzegovina&quot;</bucket>
              <bucket>&quot;Mongolia&quot;</bucket>
              <bucket>&quot;Jamaica&quot;</bucket>
              <bucket>&quot;Albania&quot;</bucket>
              <bucket>&quot;Qatar&quot;</bucket>
              <bucket>&quot;Lithuania&quot;</bucket>
              <bucket>&quot;Moldova&quot;</bucket>
              <bucket>&quot;Namibia&quot;</bucket>
              <bucket>&quot;Gambia&quot;</bucket>
              <bucket>&quot;Botswana&quot;</bucket>
              <bucket>&quot;Gabon&quot;</bucket>
              <bucket>&quot;Lesotho&quot;</bucket>
              <bucket>&quot;Slovenia&quot;</bucket>
              <bucket>&quot;Latvia&quot;</bucket>
              <bucket>&quot;Bahrain&quot;</bucket>
              <bucket>&quot;Trinidad and Tobago&quot;</bucket>
              <bucket>&quot;Estonia&quot;</bucket>
              <bucket>&quot;Mauritius&quot;</bucket>
              <bucket>&quot;Cyprus&quot;</bucket>
              <bucket>&quot;Swaziland&quot;</bucket>
              <bucket>&quot;Djibouti&quot;</bucket>
              <bucket>&quot;Fiji&quot;</bucket>
              <bucket>&quot;Guyana&quot;</bucket>
              <bucket>&quot;Bhutan&quot;</bucket>
              <bucket>&quot;Luxembourg&quot;</bucket>
              <bucket>&quot;Suriname&quot;</bucket>
              <bucket>&quot;Cape Verde&quot;</bucket>
              <bucket>&quot;Brunei&quot;</bucket>
              <bucket>&quot;Belize&quot;</bucket>
              <bucket>&quot;Iceland&quot;</bucket>
              <bucket>&quot;Barbados&quot;</bucket>
              <bucket>&quot;Seychelles&quot;</bucket>
              <bucket>&quot;Andorra&quot;</bucket>
              <bucket>&quot;Dominica&quot;</bucket>
              <bucket>&quot;Eritrea&quot;</bucket>
            </dictionary>
          </manual-sort>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[avg:Population:qk]' field-type='quantitative' major-origin='0.0' major-spacing='500000000.0' scope='cols' type='space' />
          </style-rule>
          <style-rule element='table'>
            <format attr='omit-on-special' field='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[avg:Population:qk]' value='false' />
            <format attr='break-on-special' field='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[avg:Population:qk]' value='false' />
            <format attr='show-null-value-warning' field='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[avg:Population:qk]' value='false' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <encodings>
              <color column='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[usr:Calculation_1376975624991031315:nk:2]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='false' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.1kgmjpz1fdvii81ewjjk80crvljl].[none:Countries:nk] / ([federated.1kgmjpz1fdvii81ewjjk80crvljl].[usr:Calculation_1376975624990117904:ok] / [federated.1kgmjpz1fdvii81ewjjk80crvljl].[usr:Calculation_1376975624991031315:nk:2]))</rows>
        <cols>[federated.1kgmjpz1fdvii81ewjjk80crvljl].[avg:Population:qk]</cols>
      </table>
      <simple-id uuid='{8932446C-B654-4CD9-B2D6-12F657CE3630}' />
    </worksheet>
    <worksheet name='Fatality rate sorted'>
      <table>
        <view>
          <datasources>
            <datasource caption='COVID19 Hackathon Dataset.csv+ (Multiple Connections)' name='federated.1kgmjpz1fdvii81ewjjk80crvljl' />
          </datasources>
          <datasource-dependencies datasource='federated.1kgmjpz1fdvii81ewjjk80crvljl'>
            <column caption='Fatality rate' datatype='real' name='[Calculation_1376975624905904128]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='max([Total_Deaths])/max([Total_Cases])*100' />
            </column>
            <column datatype='real' name='[Containment and Health Index (OxBSG)]' role='measure' type='quantitative' />
            <column datatype='string' name='[Countries]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column caption='Total Cases' datatype='integer' name='[Total_Cases]' role='measure' type='quantitative' />
            <column caption='Total Deaths' datatype='integer' name='[Total_Deaths]' role='measure' type='quantitative' />
            <column-instance column='[Containment and Health Index (OxBSG)]' derivation='Avg' name='[avg:Containment and Health Index (OxBSG):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Countries]' derivation='None' name='[none:Countries:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_1376975624905904128]' derivation='User' name='[usr:Calculation_1376975624905904128:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1kgmjpz1fdvii81ewjjk80crvljl].[usr:Calculation_1376975624905904128:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1kgmjpz1fdvii81ewjjk80crvljl].[avg:Containment and Health Index (OxBSG):qk]&quot;' />
            </groupfilter>
          </filter>
          <manual-sort column='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[federated.1kgmjpz1fdvii81ewjjk80crvljl].[usr:Calculation_1376975624905904128:qk]&quot;</bucket>
              <bucket>&quot;[federated.1kgmjpz1fdvii81ewjjk80crvljl].[avg:Containment and Health Index (OxBSG):qk]&quot;</bucket>
            </dictionary>
          </manual-sort>
          <computed-sort column='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[none:Countries:nk]' direction='DESC' using='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[usr:Calculation_1376975624905904128:qk]' />
          <slices>
            <column>[federated.1kgmjpz1fdvii81ewjjk80crvljl].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[:Measure Names]' />
            </encodings>
          </pane>
        </panes>
        <rows>([federated.1kgmjpz1fdvii81ewjjk80crvljl].[none:Countries:nk] / [federated.1kgmjpz1fdvii81ewjjk80crvljl].[:Measure Names])</rows>
        <cols>[federated.1kgmjpz1fdvii81ewjjk80crvljl].[Multiple Values]</cols>
      </table>
      <simple-id uuid='{096DE9A5-4E82-4D22-BE51-CDFD4C2039AA}' />
    </worksheet>
    <worksheet name='Fatality rate vs containment index'>
      <table>
        <view>
          <datasources>
            <datasource caption='COVID19 Hackathon Dataset.csv+ (Multiple Connections)' name='federated.1kgmjpz1fdvii81ewjjk80crvljl' />
          </datasources>
          <datasource-dependencies datasource='federated.1kgmjpz1fdvii81ewjjk80crvljl'>
            <column datatype='real' name='[Containment and Health Index (OxBSG)]' role='measure' type='quantitative' />
            <column datatype='string' name='[Entity]' role='dimension' type='nominal' />
            <column caption='Total Cases' datatype='integer' name='[Total_Cases]' role='measure' type='quantitative' />
            <column caption='Total Deaths' datatype='integer' name='[Total_Deaths]' role='measure' type='quantitative' />
            <column-instance column='[Containment and Health Index (OxBSG)]' derivation='Avg' name='[avg:Containment and Health Index (OxBSG):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Total_Cases]' derivation='Max' name='[max:Total_Cases:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Total_Deaths]' derivation='Max' name='[max:Total_Deaths:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Entity]' derivation='None' name='[none:Entity:nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1kgmjpz1fdvii81ewjjk80crvljl].[avg:Containment and Health Index (OxBSG):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1kgmjpz1fdvii81ewjjk80crvljl].[max:Total_Deaths:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1kgmjpz1fdvii81ewjjk80crvljl].[max:Total_Cases:qk]&quot;' />
            </groupfilter>
          </filter>
          <manual-sort column='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[federated.1kgmjpz1fdvii81ewjjk80crvljl].[max:Total_Deaths:qk]&quot;</bucket>
              <bucket>&quot;[federated.1kgmjpz1fdvii81ewjjk80crvljl].[max:Total_Cases:qk]&quot;</bucket>
              <bucket>&quot;[federated.1kgmjpz1fdvii81ewjjk80crvljl].[avg:Containment and Health Index (OxBSG):qk]&quot;</bucket>
            </dictionary>
          </manual-sort>
          <computed-sort column='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[none:Entity:nk]' direction='DESC' using='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[max:Total_Deaths:qk]' />
          <slices>
            <column>[federated.1kgmjpz1fdvii81ewjjk80crvljl].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[:Measure Names]' value='161' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1kgmjpz1fdvii81ewjjk80crvljl].[none:Entity:nk]</rows>
        <cols>[federated.1kgmjpz1fdvii81ewjjk80crvljl].[:Measure Names]</cols>
      </table>
      <simple-id uuid='{5538D532-BF84-477F-A46D-C74ABF4F227E}' />
    </worksheet>
    <worksheet name='Fatality top 10'>
      <table>
        <view>
          <datasources>
            <datasource caption='COVID19 Hackathon Dataset.csv+ (Multiple Connections)' name='federated.1kgmjpz1fdvii81ewjjk80crvljl' />
          </datasources>
          <datasource-dependencies datasource='federated.1kgmjpz1fdvii81ewjjk80crvljl'>
            <column caption='Fatality rate' datatype='real' name='[Calculation_1376975624905904128]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='max([Total_Deaths])/max([Total_Cases])*100' />
            </column>
            <column datatype='string' name='[Countries]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column caption='Total Cases' datatype='integer' name='[Total_Cases]' role='measure' type='quantitative' />
            <column caption='Total Deaths' datatype='integer' name='[Total_Deaths]' role='measure' type='quantitative' />
            <column-instance column='[Top 10 Countries Mortality]' derivation='InOut' name='[io:Top 10 Countries Mortality:nk]' pivot='key' type='nominal' />
            <column-instance column='[Countries]' derivation='None' name='[none:Countries:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_1376975624905904128]' derivation='User' name='[usr:Calculation_1376975624905904128:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <computed-sort column='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[none:Countries:nk]' direction='DESC' using='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[usr:Calculation_1376975624905904128:qk]' />
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[io:Top 10 Countries Mortality:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='false' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.1kgmjpz1fdvii81ewjjk80crvljl].[none:Countries:nk] / [federated.1kgmjpz1fdvii81ewjjk80crvljl].[io:Top 10 Countries Mortality:nk])</rows>
        <cols>[federated.1kgmjpz1fdvii81ewjjk80crvljl].[usr:Calculation_1376975624905904128:qk]</cols>
      </table>
      <simple-id uuid='{788B115B-52BB-426B-A6E2-685C44F99F3D}' />
    </worksheet>
    <worksheet name='Sheet 10'>
      <table>
        <view>
          <datasources>
            <datasource caption='COVID19 Hackathon Dataset.csv+ (Multiple Connections)' name='federated.1kgmjpz1fdvii81ewjjk80crvljl' />
          </datasources>
          <datasource-dependencies datasource='federated.1kgmjpz1fdvii81ewjjk80crvljl'>
            <column caption='TOTAL(SUM([Population]))' datatype='integer' name='[Calculation_1376975624941408269]' role='measure' type='quantitative' user:unnamed='Sheet 10'>
              <calculation class='tableau' formula='TOTAL(SUM([Population]))'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column datatype='string' name='[Countries]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='integer' name='[Population]' role='measure' type='quantitative' />
            <column-instance column='[Population]' derivation='Avg' name='[avg:Population:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Countries]' derivation='None' name='[none:Countries:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_1376975624941408269]' derivation='User' name='[usr:Calculation_1376975624941408269:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Columns' />
            </column-instance>
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[avg:Population:qk]' />
              <text column='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[usr:Calculation_1376975624941408269:qk]' />
            </encodings>
            <style>
              <style-rule element='cell'>
                <format attr='text-align' value='right' />
              </style-rule>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1kgmjpz1fdvii81ewjjk80crvljl].[none:Countries:nk]</rows>
        <cols />
      </table>
      <simple-id uuid='{B6EE0578-EF0B-495D-98D1-2E2057FC5239}' />
    </worksheet>
    <worksheet name='Sheet 11'>
      <table>
        <view>
          <datasources />
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
      <simple-id uuid='{5A3EF078-CF4E-40DE-AF2F-D6FF0B26EF0C}' />
    </worksheet>
    <worksheet name='Sheet 9'>
      <table>
        <view>
          <datasources>
            <datasource caption='COVID19 Hackathon Dataset.csv+ (Multiple Connections)' name='federated.1kgmjpz1fdvii81ewjjk80crvljl' />
          </datasources>
          <datasource-dependencies datasource='federated.1kgmjpz1fdvii81ewjjk80crvljl'>
            <column caption='Population (bin) 2' datatype='integer' name='[Population (bin) 2]' role='dimension' type='ordinal'>
              <calculation class='bin' decimals='4' formula='[Population]' peg='0' size='5e+07' />
            </column>
            <column datatype='integer' name='[Population]' role='measure' type='quantitative' />
            <column-instance column='[Population]' derivation='CountD' name='[ctd:Population:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Population (bin) 2]' derivation='None' name='[none:Population (bin) 2:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <computed-sort column='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[none:Population (bin) 2:ok]' direction='DESC' using='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[ctd:Population:qk]' />
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>[federated.1kgmjpz1fdvii81ewjjk80crvljl].[ctd:Population:qk]</rows>
        <cols>[federated.1kgmjpz1fdvii81ewjjk80crvljl].[none:Population (bin) 2:ok]</cols>
        <show-full-range>
          <column>[federated.1kgmjpz1fdvii81ewjjk80crvljl].[Population (bin) 2]</column>
        </show-full-range>
      </table>
      <simple-id uuid='{7CC219B9-AA81-4E54-9995-329772BAB124}' />
    </worksheet>
    <worksheet name='containment vs daily death'>
      <table>
        <view>
          <datasources>
            <datasource caption='COVID19 Hackathon Dataset.csv+ (Multiple Connections)' name='federated.1kgmjpz1fdvii81ewjjk80crvljl' />
          </datasources>
          <datasource-dependencies datasource='federated.1kgmjpz1fdvii81ewjjk80crvljl'>
            <column datatype='real' name='[Containment and Health Index (OxBSG)]' role='measure' type='quantitative' />
            <column datatype='string' name='[Countries]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='date' name='[Date]' role='dimension' type='ordinal' />
            <column datatype='integer' name='[Population]' role='measure' type='quantitative' />
            <column caption='Total Deaths' datatype='integer' name='[Total_Deaths]' role='measure' type='quantitative' />
            <column-instance column='[Containment and Health Index (OxBSG)]' derivation='Avg' name='[avg:Containment and Health Index (OxBSG):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Total_Deaths]' derivation='Max' name='[diff:max:Total_Deaths:qk]' pivot='key' type='quantitative'>
              <table-calc diff-options='Relative' ordering-type='Rows' type='Difference'>
                <address>
                  <value>-1</value>
                </address>
              </table-calc>
            </column-instance>
            <column-instance column='[Total_Deaths]' derivation='Max' name='[max:Total_Deaths:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Countries]' derivation='None' name='[none:Countries:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[none:Countries:nk]'>
            <groupfilter count='10' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='AVG([Population])' function='order' user:ui-marker='order'>
                <groupfilter function='member' level='[none:Countries:nk]' member='&quot;Germany&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
              </groupfilter>
            </groupfilter>
          </filter>
          <computed-sort column='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[none:Countries:nk]' direction='DESC' using='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[max:Total_Deaths:qk]' />
          <slices>
            <column>[federated.1kgmjpz1fdvii81ewjjk80crvljl].[none:Countries:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='display' class='0' field='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[avg:Containment and Health Index (OxBSG):qk]' scope='rows' value='true' />
            <encoding attr='space' class='0' field='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[diff:max:Total_Deaths:qk]' field-type='quantitative' fold='true' scope='rows' synchronized='true' type='space' />
            <format attr='display' class='0' field='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[diff:max:Total_Deaths:qk]' scope='rows' value='true' />
          </style-rule>
          <style-rule element='table'>
            <format attr='omit-on-special' field='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[max:Total_Deaths:qk]' value='false' />
            <format attr='break-on-special' field='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[max:Total_Deaths:qk]' value='false' />
            <format attr='show-null-value-warning' field='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[max:Total_Deaths:qk]' value='false' />
            <format attr='omit-on-special' field='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[diff:max:Total_Deaths:qk]' value='false' />
            <format attr='break-on-special' field='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[diff:max:Total_Deaths:qk]' value='false' />
            <format attr='show-null-value-warning' field='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[diff:max:Total_Deaths:qk]' value='false' />
          </style-rule>
        </style>
        <panes>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <lod column='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[none:Countries:nk]' />
              <color column='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[:Measure Names]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='false' />
              </style-rule>
            </style>
          </pane>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[avg:Containment and Health Index (OxBSG):qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <lod column='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[none:Countries:nk]' />
              <color column='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[:Measure Names]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='false' />
                <format attr='mark-color' value='#59a14f' />
                <format attr='mark-transparency' value='121' />
                <format attr='size' value='0.60370165109634399' />
              </style-rule>
            </style>
          </pane>
          <pane id='3' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[diff:max:Total_Deaths:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <lod column='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[none:Countries:nk]' />
              <color column='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[:Measure Names]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='false' />
                <format attr='mark-transparency' value='211' />
                <format attr='mark-markers-mode' value='none' />
                <format attr='mark-color' value='#e15759' />
                <format attr='size' value='0.60370165109634399' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.1kgmjpz1fdvii81ewjjk80crvljl].[none:Countries:nk] * ([federated.1kgmjpz1fdvii81ewjjk80crvljl].[avg:Containment and Health Index (OxBSG):qk] + [federated.1kgmjpz1fdvii81ewjjk80crvljl].[diff:max:Total_Deaths:qk]))</rows>
        <cols>[federated.1kgmjpz1fdvii81ewjjk80crvljl].[none:Date:ok]</cols>
      </table>
      <simple-id uuid='{64B441AB-FFED-45E8-9AEF-C6BFF57BE7F9}' />
    </worksheet>
    <worksheet name='containment vs total death'>
      <table>
        <view>
          <datasources>
            <datasource caption='COVID19 Hackathon Dataset.csv+ (Multiple Connections)' name='federated.1kgmjpz1fdvii81ewjjk80crvljl' />
          </datasources>
          <datasource-dependencies datasource='federated.1kgmjpz1fdvii81ewjjk80crvljl'>
            <column datatype='real' name='[Containment and Health Index (OxBSG)]' role='measure' type='quantitative' />
            <column datatype='string' name='[Countries]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='date' name='[Date]' role='dimension' type='ordinal' />
            <column datatype='integer' name='[Population]' role='measure' type='quantitative' />
            <column caption='Total Deaths' datatype='integer' name='[Total_Deaths]' role='measure' type='quantitative' />
            <column-instance column='[Containment and Health Index (OxBSG)]' derivation='Avg' name='[avg:Containment and Health Index (OxBSG):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Total_Deaths]' derivation='Max' name='[max:Total_Deaths:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Countries]' derivation='None' name='[none:Countries:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[none:Countries:nk]'>
            <groupfilter count='10' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='AVG([Population])' function='order' user:ui-marker='order'>
                <groupfilter function='member' level='[none:Countries:nk]' member='&quot;Canada&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
              </groupfilter>
            </groupfilter>
          </filter>
          <computed-sort column='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[none:Countries:nk]' direction='DESC' using='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[max:Total_Deaths:qk]' />
          <slices>
            <column>[federated.1kgmjpz1fdvii81ewjjk80crvljl].[none:Countries:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[max:Total_Deaths:qk]' field-type='quantitative' fold='true' scope='rows' type='space' />
            <format attr='display' class='0' field='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[max:Total_Deaths:qk]' scope='rows' value='true' />
            <format attr='display' class='0' field='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[avg:Containment and Health Index (OxBSG):qk]' scope='rows' value='true' />
          </style-rule>
          <style-rule element='table'>
            <format attr='omit-on-special' field='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[max:Total_Deaths:qk]' value='false' />
            <format attr='break-on-special' field='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[max:Total_Deaths:qk]' value='false' />
            <format attr='show-null-value-warning' field='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[max:Total_Deaths:qk]' value='false' />
          </style-rule>
        </style>
        <panes>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <lod column='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[none:Countries:nk]' />
              <color column='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[:Measure Names]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='false' />
              </style-rule>
            </style>
          </pane>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[avg:Containment and Health Index (OxBSG):qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <lod column='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[none:Countries:nk]' />
              <color column='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[:Measure Names]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='false' />
                <format attr='mark-color' value='#59a14f' />
                <format attr='mark-transparency' value='121' />
                <format attr='size' value='0.60370165109634399' />
              </style-rule>
            </style>
          </pane>
          <pane id='3' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[max:Total_Deaths:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <lod column='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[none:Countries:nk]' />
              <color column='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[:Measure Names]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='false' />
                <format attr='mark-transparency' value='211' />
                <format attr='mark-markers-mode' value='none' />
                <format attr='mark-color' value='#e15759' />
                <format attr='size' value='0.60370165109634399' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.1kgmjpz1fdvii81ewjjk80crvljl].[none:Countries:nk] * ([federated.1kgmjpz1fdvii81ewjjk80crvljl].[avg:Containment and Health Index (OxBSG):qk] + [federated.1kgmjpz1fdvii81ewjjk80crvljl].[max:Total_Deaths:qk]))</rows>
        <cols>[federated.1kgmjpz1fdvii81ewjjk80crvljl].[none:Date:ok]</cols>
      </table>
      <simple-id uuid='{0669CF70-D6FA-4188-8D4B-4E9BD7F8E2CA}' />
    </worksheet>
    <worksheet name='fatality'>
      <table>
        <view>
          <datasources>
            <datasource caption='COVID19 Hackathon Dataset.csv+ (Multiple Connections)' name='federated.1kgmjpz1fdvii81ewjjk80crvljl' />
          </datasources>
          <datasource-dependencies datasource='federated.1kgmjpz1fdvii81ewjjk80crvljl'>
            <column caption='Fatality rate' datatype='real' name='[Calculation_1376975624905904128]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='max([Total_Deaths])/max([Total_Cases])*100' />
            </column>
            <column datatype='real' name='[Containment and Health Index (OxBSG)]' role='measure' type='quantitative' />
            <column datatype='string' name='[Countries]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='date' name='[Date]' role='dimension' type='ordinal' />
            <column datatype='integer' name='[Population]' role='measure' type='quantitative' />
            <column caption='Total Cases' datatype='integer' name='[Total_Cases]' role='measure' type='quantitative' />
            <column caption='Total Deaths' datatype='integer' name='[Total_Deaths]' role='measure' type='quantitative' />
            <column-instance column='[Containment and Health Index (OxBSG)]' derivation='Avg' name='[avg:Containment and Health Index (OxBSG):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Countries]' derivation='None' name='[none:Countries:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='Day-Trunc' name='[tdy:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_1376975624905904128]' derivation='User' name='[usr:Calculation_1376975624905904128:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[none:Countries:nk]'>
            <groupfilter count='10' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='AVG([Population])' function='order' user:ui-marker='order'>
                <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
                  <groupfilter function='member' level='[none:Countries:nk]' member='&quot;Bangladesh&quot;' />
                  <groupfilter function='member' level='[none:Countries:nk]' member='&quot;India&quot;' />
                  <groupfilter function='member' level='[none:Countries:nk]' member='&quot;Indonesia&quot;' />
                  <groupfilter function='member' level='[none:Countries:nk]' member='&quot;Mexico&quot;' />
                  <groupfilter function='member' level='[none:Countries:nk]' member='&quot;Nigeria&quot;' />
                  <groupfilter function='member' level='[none:Countries:nk]' member='&quot;Pakistan&quot;' />
                  <groupfilter function='member' level='[none:Countries:nk]' member='&quot;Russia&quot;' />
                  <groupfilter function='member' level='[none:Countries:nk]' member='&quot;United States&quot;' />
                </groupfilter>
              </groupfilter>
            </groupfilter>
          </filter>
          <computed-sort column='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[none:Countries:nk]' direction='DESC' using='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[usr:Calculation_1376975624905904128:qk]' />
          <slices>
            <column>[federated.1kgmjpz1fdvii81ewjjk80crvljl].[none:Countries:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='display' class='0' field='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[avg:Containment and Health Index (OxBSG):qk]' scope='rows' value='true' />
            <encoding attr='space' class='0' field='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[usr:Calculation_1376975624905904128:qk]' field-type='quantitative' fold='true' scope='rows' type='space' />
          </style-rule>
          <style-rule element='table'>
            <format attr='omit-on-special' field='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[usr:Calculation_1376975624905904128:qk]' value='false' />
            <format attr='break-on-special' field='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[usr:Calculation_1376975624905904128:qk]' value='false' />
            <format attr='show-null-value-warning' field='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[usr:Calculation_1376975624905904128:qk]' value='false' />
          </style-rule>
        </style>
        <panes>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <lod column='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[none:Countries:nk]' />
              <color column='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[:Measure Names]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='false' />
              </style-rule>
            </style>
          </pane>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[avg:Containment and Health Index (OxBSG):qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Area' />
            <encodings>
              <lod column='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[none:Countries:nk]' />
              <color column='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[:Measure Names]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='false' />
                <format attr='mark-color' value='#59a14f' />
                <format attr='mark-transparency' value='121' />
              </style-rule>
            </style>
          </pane>
          <pane id='5' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[usr:Calculation_1376975624905904128:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <lod column='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[none:Countries:nk]' />
              <color column='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[:Measure Names]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='false' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.1kgmjpz1fdvii81ewjjk80crvljl].[none:Countries:nk] * ([federated.1kgmjpz1fdvii81ewjjk80crvljl].[avg:Containment and Health Index (OxBSG):qk] + [federated.1kgmjpz1fdvii81ewjjk80crvljl].[usr:Calculation_1376975624905904128:qk]))</rows>
        <cols>[federated.1kgmjpz1fdvii81ewjjk80crvljl].[tdy:Date:qk]</cols>
      </table>
      <simple-id uuid='{31556E4B-E724-4AF5-B6E3-4123A6A797B4}' />
    </worksheet>
    <worksheet name='mortality '>
      <table>
        <view>
          <datasources>
            <datasource caption='COVID19 Hackathon Dataset.csv+ (Multiple Connections)' name='federated.1kgmjpz1fdvii81ewjjk80crvljl' />
          </datasources>
          <datasource-dependencies datasource='federated.1kgmjpz1fdvii81ewjjk80crvljl'>
            <column caption='Mortality' datatype='real' name='[Calculation_1376975624931659780]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='(max([Total_Deaths])/avg([Population]))*10000' />
            </column>
            <column datatype='real' name='[Containment and Health Index (OxBSG)]' role='measure' type='quantitative' />
            <column datatype='string' name='[Countries]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='date' name='[Date]' role='dimension' type='ordinal' />
            <column datatype='integer' name='[Population]' role='measure' type='quantitative' />
            <column caption='Total Deaths' datatype='integer' name='[Total_Deaths]' role='measure' type='quantitative' />
            <column-instance column='[Containment and Health Index (OxBSG)]' derivation='Avg' name='[avg:Containment and Health Index (OxBSG):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Countries]' derivation='None' name='[none:Countries:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='Day-Trunc' name='[tdy:Date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_1376975624931659780]' derivation='User' name='[usr:Calculation_1376975624931659780:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[none:Countries:nk]'>
            <groupfilter count='10' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='AVG([Population])' function='order' user:ui-marker='order'>
                <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
                  <groupfilter function='member' level='[none:Countries:nk]' member='&quot;Bangladesh&quot;' />
                  <groupfilter function='member' level='[none:Countries:nk]' member='&quot;India&quot;' />
                  <groupfilter function='member' level='[none:Countries:nk]' member='&quot;Indonesia&quot;' />
                  <groupfilter function='member' level='[none:Countries:nk]' member='&quot;Mexico&quot;' />
                  <groupfilter function='member' level='[none:Countries:nk]' member='&quot;Nigeria&quot;' />
                  <groupfilter function='member' level='[none:Countries:nk]' member='&quot;Pakistan&quot;' />
                  <groupfilter function='member' level='[none:Countries:nk]' member='&quot;Russia&quot;' />
                  <groupfilter function='member' level='[none:Countries:nk]' member='&quot;United States&quot;' />
                </groupfilter>
              </groupfilter>
            </groupfilter>
          </filter>
          <computed-sort column='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[none:Countries:nk]' direction='DESC' using='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[usr:Calculation_1376975624931659780:qk]' />
          <slices>
            <column>[federated.1kgmjpz1fdvii81ewjjk80crvljl].[none:Countries:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='display' class='0' field='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[avg:Containment and Health Index (OxBSG):qk]' scope='rows' value='true' />
            <encoding attr='space' class='0' field='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[usr:Calculation_1376975624931659780:qk]' field-type='quantitative' fold='true' scope='rows' type='space' />
            <format attr='title' class='0' field='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[usr:Calculation_1376975624931659780:qk]' scope='rows' value='Deaths/10K' />
          </style-rule>
        </style>
        <panes>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <lod column='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[none:Countries:nk]' />
              <color column='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[:Measure Names]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='false' />
              </style-rule>
            </style>
          </pane>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[avg:Containment and Health Index (OxBSG):qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Area' />
            <encodings>
              <lod column='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[none:Countries:nk]' />
              <color column='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[:Measure Names]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='false' />
                <format attr='mark-color' value='#59a14f' />
                <format attr='mark-transparency' value='121' />
              </style-rule>
            </style>
          </pane>
          <pane id='4' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[usr:Calculation_1376975624931659780:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <lod column='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[none:Countries:nk]' />
              <color column='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[:Measure Names]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='false' />
                <format attr='size' value='0.58171272277832031' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.1kgmjpz1fdvii81ewjjk80crvljl].[none:Countries:nk] * ([federated.1kgmjpz1fdvii81ewjjk80crvljl].[avg:Containment and Health Index (OxBSG):qk] + [federated.1kgmjpz1fdvii81ewjjk80crvljl].[usr:Calculation_1376975624931659780:qk]))</rows>
        <cols>[federated.1kgmjpz1fdvii81ewjjk80crvljl].[tdy:Date:qk]</cols>
      </table>
      <simple-id uuid='{894911C4-A209-48F6-B51B-9FEDAD4A333B}' />
    </worksheet>
    <worksheet name='total death top10'>
      <table>
        <view>
          <datasources>
            <datasource caption='COVID19 Hackathon Dataset.csv+ (Multiple Connections)' name='federated.1kgmjpz1fdvii81ewjjk80crvljl' />
          </datasources>
          <datasource-dependencies datasource='federated.1kgmjpz1fdvii81ewjjk80crvljl'>
            <column datatype='string' name='[Countries]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column caption='Total Deaths' datatype='integer' name='[Total_Deaths]' role='measure' type='quantitative' />
            <column-instance column='[Top 10 Countries By Mortality Rate]' derivation='InOut' name='[io:Top 10 Countries By Mortality Rate:nk]' pivot='key' type='nominal' />
            <column-instance column='[Total_Deaths]' derivation='Max' name='[max:Total_Deaths:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Countries]' derivation='None' name='[none:Countries:nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <computed-sort column='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[none:Countries:nk]' direction='DESC' using='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[max:Total_Deaths:qk]' />
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[io:Top 10 Countries By Mortality Rate:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='false' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.1kgmjpz1fdvii81ewjjk80crvljl].[none:Countries:nk] / [federated.1kgmjpz1fdvii81ewjjk80crvljl].[io:Top 10 Countries By Mortality Rate:nk])</rows>
        <cols>[federated.1kgmjpz1fdvii81ewjjk80crvljl].[max:Total_Deaths:qk]</cols>
      </table>
      <simple-id uuid='{062D532B-B74F-430E-B781-7DF321E0D226}' />
    </worksheet>
  </worksheets>
  <windows saved-dpi-scale-factor='1.25' source-height='37'>
    <window class='worksheet' name='Fatality rate vs containment index'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <simple-id uuid='{99C91E8E-5787-4BF4-A961-59DC58ADE83B}' />
    </window>
    <window class='worksheet' name='Fatality rate sorted'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[:Measure Names]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1kgmjpz1fdvii81ewjjk80crvljl].[:Measure Names]</field>
            <field>[federated.1kgmjpz1fdvii81ewjjk80crvljl].[none:Countries:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{43D5BC1C-EAD1-4924-AA93-308C0788CB21}' />
    </window>
    <window class='worksheet' name='Fatality top 10'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[io:Top 10 Countries Mortality:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1kgmjpz1fdvii81ewjjk80crvljl].[io:Top 10 Countries Mortality:nk]</field>
            <field>[federated.1kgmjpz1fdvii81ewjjk80crvljl].[none:Countries:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{ACED4862-80DC-4DB7-B592-9E61D528A3FC}' />
    </window>
    <window class='worksheet' name='total death top10'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[io:Top 10 Countries By Mortality Rate:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1kgmjpz1fdvii81ewjjk80crvljl].[io:Top 10 Countries By Mortality Rate:nk]</field>
            <field>[federated.1kgmjpz1fdvii81ewjjk80crvljl].[io:Top 10 Countries Mortality:nk]</field>
            <field>[federated.1kgmjpz1fdvii81ewjjk80crvljl].[none:Countries:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{5FD67F9B-D977-440A-82C8-775248920061}' />
    </window>
    <window class='worksheet' name='Country groups'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[usr:Calculation_1376975624991031315:nk:2]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1kgmjpz1fdvii81ewjjk80crvljl].[avg:Population:ok]</field>
            <field>[federated.1kgmjpz1fdvii81ewjjk80crvljl].[io:Countries Set:nk]</field>
            <field>[federated.1kgmjpz1fdvii81ewjjk80crvljl].[none:Countries:nk]</field>
            <field>[federated.1kgmjpz1fdvii81ewjjk80crvljl].[usr:Calculation_1376975624991031315:nk:2]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{1E1EA28D-046D-4F72-809D-615A9DBFC473}' />
    </window>
    <window class='worksheet' name='containment vs total death'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='dropdown' param='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[none:Countries:nk]' type='filter' />
            <card pane-specification-id='2' param='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[:Measure Names]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1kgmjpz1fdvii81ewjjk80crvljl].[:Measure Names]</field>
            <field>[federated.1kgmjpz1fdvii81ewjjk80crvljl].[io:Countries Set:nk]</field>
            <field>[federated.1kgmjpz1fdvii81ewjjk80crvljl].[io:Top 10 Countries Mortality:nk]</field>
            <field>[federated.1kgmjpz1fdvii81ewjjk80crvljl].[my:Date:ok]</field>
            <field>[federated.1kgmjpz1fdvii81ewjjk80crvljl].[none:Countries:nk]</field>
            <field>[federated.1kgmjpz1fdvii81ewjjk80crvljl].[sum:Containment and Health Index (OxBSG):qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{556C2D57-29E6-47A3-B685-DF94156B1389}' />
    </window>
    <window class='worksheet' name='containment vs daily death'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='dropdown' param='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[none:Countries:nk]' type='filter' />
            <card pane-specification-id='2' param='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[:Measure Names]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1kgmjpz1fdvii81ewjjk80crvljl].[:Measure Names]</field>
            <field>[federated.1kgmjpz1fdvii81ewjjk80crvljl].[io:Countries Set:nk]</field>
            <field>[federated.1kgmjpz1fdvii81ewjjk80crvljl].[io:Top 10 Countries Mortality:nk]</field>
            <field>[federated.1kgmjpz1fdvii81ewjjk80crvljl].[md:Date:ok]</field>
            <field>[federated.1kgmjpz1fdvii81ewjjk80crvljl].[my:Date:ok]</field>
            <field>[federated.1kgmjpz1fdvii81ewjjk80crvljl].[none:Countries:nk]</field>
            <field>[federated.1kgmjpz1fdvii81ewjjk80crvljl].[sum:Containment and Health Index (OxBSG):qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{F58C75DE-F35D-4EDA-97CE-805869F4E999}' />
    </window>
    <window class='worksheet' name='mortality '>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[none:Countries:nk]' type='filter' />
            <card pane-specification-id='2' param='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[:Measure Names]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <selection-collection>
          <node-selection select-tuples='false'>
            <oriented-node-reference orientation='vertical'>
              <node-reference>
                <fields>
                  <field>[federated.1kgmjpz1fdvii81ewjjk80crvljl].[none:Countries:nk]</field>
                </fields>
                <multibucket>
                  <bucket>&quot;United States&quot;</bucket>
                </multibucket>
                <axis>[federated.1kgmjpz1fdvii81ewjjk80crvljl].[usr:Calculation_1376975624931659780:qk]</axis>
              </node-reference>
              <page-reference />
            </oriented-node-reference>
          </node-selection>
        </selection-collection>
        <highlight>
          <color-one-way>
            <field>[federated.1kgmjpz1fdvii81ewjjk80crvljl].[:Measure Names]</field>
            <field>[federated.1kgmjpz1fdvii81ewjjk80crvljl].[io:Countries Set:nk]</field>
            <field>[federated.1kgmjpz1fdvii81ewjjk80crvljl].[io:Top 10 Countries Mortality:nk]</field>
            <field>[federated.1kgmjpz1fdvii81ewjjk80crvljl].[my:Date:ok]</field>
            <field>[federated.1kgmjpz1fdvii81ewjjk80crvljl].[none:Calculation_1376975624931143682:qk]</field>
            <field>[federated.1kgmjpz1fdvii81ewjjk80crvljl].[none:Countries:nk]</field>
            <field>[federated.1kgmjpz1fdvii81ewjjk80crvljl].[sum:Containment and Health Index (OxBSG):qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{92F11104-C27B-400B-B38D-0C961E2629DD}' />
    </window>
    <window class='worksheet' name='fatality'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[none:Countries:nk]' type='filter' />
            <card pane-specification-id='2' param='[federated.1kgmjpz1fdvii81ewjjk80crvljl].[:Measure Names]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1kgmjpz1fdvii81ewjjk80crvljl].[:Measure Names]</field>
            <field>[federated.1kgmjpz1fdvii81ewjjk80crvljl].[io:Countries Set:nk]</field>
            <field>[federated.1kgmjpz1fdvii81ewjjk80crvljl].[io:Top 10 Countries Mortality:nk]</field>
            <field>[federated.1kgmjpz1fdvii81ewjjk80crvljl].[my:Date:ok]</field>
            <field>[federated.1kgmjpz1fdvii81ewjjk80crvljl].[none:Calculation_1376975624931143682:qk]</field>
            <field>[federated.1kgmjpz1fdvii81ewjjk80crvljl].[none:Countries:nk]</field>
            <field>[federated.1kgmjpz1fdvii81ewjjk80crvljl].[sum:Containment and Health Index (OxBSG):qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{B18EF88F-30F3-4487-9B07-172F8CF55B35}' />
    </window>
    <window class='worksheet' name='Sheet 9'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <simple-id uuid='{B2A4D44C-9094-4153-BE10-41477AA4931D}' />
    </window>
    <window class='worksheet' name='Sheet 10'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1kgmjpz1fdvii81ewjjk80crvljl].[none:Calculation_1376975624941301772:qk]</field>
            <field>[federated.1kgmjpz1fdvii81ewjjk80crvljl].[none:Countries:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{AFA4C631-BDD9-4942-83F9-BC781DF6152E}' />
    </window>
    <window class='worksheet' maximized='true' name='Sheet 11'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <simple-id uuid='{40FCD27B-F943-473F-AFAF-AE8F17CB36F0}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Country groups' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Fatality rate sorted' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Fatality rate vs containment index' width='192'>
      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
      rkJggg==
    </thumbnail>
    <thumbnail height='192' name='Fatality top 10' width='192'>
      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
      jaMBHO40/z/BUtY7+VCIaAAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Sheet 10' width='192'>
      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
      MD4+jsFgYNu2bfj9fpqamrh27RrHjx9HqVSye/dugoKCOHHiBAMDAxgMsmbgGQAAIABJREFU
      Bp555hn0ej3Dw8OUlJSwY8cOQkNDuXTpEseOHQMgOzub9PR0GhsbuXnzJt3d3eLDv2XLFrKy
      skQrppCQENasWUNkZCQej4ePPvqIvLw8sRrUYrEwNDREc3MzCxYsYPPmzVy5coXm5mYUCgUr
      VqwgKSkJqVTKunXrOH36NGVlZRgMBnbv3i2uQ/6gatAA/3GYTCauXLnCli1bZpQQ/7EMDw9z
      4cIFNmzYMK38+I9FEAQqKyvx+/2sXLnyEVwhYgB2dHSwadOmaR5kXxWtVvtgbdBAAHzzGB8f
      x+v1otPp/qBGkS/C6XRit9sJCwt7JJWWUynNoKCgRyK2O3XOkZERVCrVIwv8KQIBEOCx5nM3
      whQKxSMdagIE+KYSkEcP8NgikUgkgTRogMeaQBo0wJcyMjJCa2srLpeL9PR0oqOjRV+xe/fu
      4XK5Hujm6Pf7GRgYoL29HYCUlBTRnd5isWA0GnE6ncTFxZGSkoJMJsNoNHLv3j1gsrwhKytr
      mgKc3+9nfHyc1tZWxsbGxF1pqVSK1WoVr3POnDnExsbi9/vp7++nra1NVIObM2eOuMMcGAEC
      fCF+v5+qqira29uxWCwcOnSI+/fv4/V6uXz5Mm+99dYDi/ZgUvjqvffeo6+vj76+Pj744ANG
      RkawWq28//77dHZ2MjIyMs2DrKSkhP7+fpxOJ06nc5qALkxmwz788EPu3r3L+Pg4ly5dora2
      FofDQXFxMW1tbfT19fH+++9jsVjE658KNqfTOS3BExgBAnwpa9euRSKR4PP5KC4uZmBgAEEQ
      0Gq1vPjii9TV1T3wfUajkcTERIqKigA4cuQIRqORBQsW8OqrrxIcHIxEIuHy5cu0trYSFxeH
      TCZj69atM3oLplCr1Tz77LPo9XokEgmtra1UVVWJadKioiJkMhkXL16ktLSULVu24HA4WLNm
      DcnJyTPOFwiAAF+IRCJBJpPh9/sZHh7GZrMRHx9PZGQkcXFxNDU1fe6+RHx8PGVlZQwPDyOR
      SOjr62P58uWifg8gTlsKCgoYGxujoaGBN998k5CQEJ5++mlycnKmZSQVCoWoGO1yubh586bo
      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
    </thumbnail>
    <thumbnail height='192' name='Sheet 11' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAABJ0AAASdAHeZh94
      AAACFUlEQVR4nO3TMQEAIAzAMMC/5yFjRxMFfXpnZg5Eve0A2GQA0gxAmgFIMwBpBiDNAKQZ
      gDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFI
      MwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQD
      kGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBp
      BiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA
      0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDN
      AKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxA
      mgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZ
      gDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFI
      MwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKR9Y+0F
      fBUOM1sAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Sheet 9' width='192'>
      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
      zg/w/wFGo8ipufTuGAAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='containment vs daily death' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='containment vs total death' width='192'>
      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
      AAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='fatality' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='mortality ' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAABJ0AAASdAHeZh94
      AAAgAElEQVR4nO2dV3MkV5bff2nKV8F7oNFw7dhkN8nxOztrZmfl3SokRewH0IMU0pP0VVYK
      vSliIySFdqWQdne0M5whZzgcDtnkkM228N5UFVDepc+rh0KD3Q1XBaAS6Eb+IhjsRGXVvZV1
      z7Xn/I8khBD4+FxS5POugI/PeeIbgM+lxjcAn0uNbwA+lxrfAHwuNb4B+Fxq1Gf/qFQquK7b
      0sK2U1t09w2hNGl2tm2jKAqSJLWmYj6Xlj0DiMfjLS/M1Gu0tbXtMwDhOmiGRSQcJJfN0dHV
      jV4tIZQw0XCAUqlENBr1DcDnzFGPv+Xs2E6naOseQHnp7+mtDdIljYFYAE0Okl1ZxSiXQZa5
      /dZtZFlGVVXfAHzOHE/WANWdFf7HX/xvljYzB77eP3SFkCKhm4KhkSEkp0w40kN7KIjlRQV9
      Li2eGIBtapiORDgcZn8fLthcXWJ7e5toW4ynDx4T67iCbaQouRJBLyroc2lp+RTIMTVW00Xi
      QYGm6ex3PJIYGZ9iZHwKgN7+QQCGet9pddV8fFpvALIaYurGbQLBKJYUQPan8T4XiJYbgCTL
      6JklPvjsMeODXVy/cQvVP33wHN/p92A82QWKtPXwg2+9w8r6JrLf+D2nqpv85N4Ctt3ac55X
      EU8M4IuP32fDGSQkNFy/I/KUR4tpZtezCCFQmj2BvAR4YgB3vvtDlMUk8cQoAX8N4BmO67Kc
      zAP4ZyiH4IkBCL2AJiL0RcJeFOcDbOerLG7lqBk2qt/zH8q+J7O+vo5WzrGTq+z9rVwuk81l
      971ZL2TIa+axhaiRTjJr00zPzuMcMQVaW5rn6cwM1UqRr756wNrWToNfw+d5Klp9zr+xXfIb
      /2EIgWwa+0eASrVCZyxApVpmaWaWeFc7QdklndxgdOo2ua1FSnaQ0b4E+Z0Mg7e/cWxZsgKK
      GsRxXI4aiR3HxrFskqtJJu/cIbWwgOt247outm37w3iDzKxuEwrKCCEu5+6PcFFMA8U0Ceg1
      wuUioUoRVa+hWGb9uSDhBIL7DcC2TEqlMsFIjKErE9hWAcOw6enrp7+vk/VFi+ErI2hGleGB
      XhrZV3AsAykQBsc6chHc0d1HTCuws1Mls53FdASyLPu+QE2gGRar6RKK/LLH1WuEECBcVF0n
      UsgQrJZRDA1V1whoNZDADoZxA0GsSAwj0U6tbxA7FMEJhni+F5ZeVoWolvIUajaDfZ1YFghh
      I1xBQBFkihqxIFRM6E6E2M6V6BsYIHjEMOtaOslsmf7uDlLJJANXRlEPacdapUimpDMy1M/2
      1gYdvYOEAgqlUolEIuEbwDEIIfjF/RWyxdpr9awUQyeaTRMuZOuN3dQBcIJhtI5ujLYOnGAI
      OxTBjsQ4cprxEvtGgFhbJ7G2+r9DoRdvGeiLApDYvR4ZPt6F2rV1njx5SuzdO8zOTNMzPIp6
      SOcUibdzJd4OQP/QSMNfwqfOTqFGOlchcNgDvui4LoFahUghQ6hcJFgpEtCq2MEIWncvlb5h
      rFgcJxRGSHJTDf0w9o0AhlbDQSZ6Zjs2gvTGMtML60y9cYeRvs6mP8EfAY7n8VKambX6fv8r
      85xcB9XQiWbSJFLrqHoNKxqn1tWHFY2jt3fhhEIgtW4h/5IBWPz23gP6R4ZJbyzTMzxBTLGx
      lCiZ1Tki/VfoiweoWgptYciUTK6ODDZsiOurSwxemWjaFcI3gK+pL2xf/FupZvC3n85f/J5f
      CMKFDO0by4TzGYSs4ITC1Lp6KQ+OYkdbH5T1Mi9NgQL09MTJ5QpE2rsYGxlgfuYxa9urjPV2
      c2V0mN/+6gOEHKWntw0lGEPAAS7OL2KbGqntLOWKRpdpoYYDrfo+rz2/ndliafdw6xm24xK8
      gI1fchxCpTzx1DqRQhbZMjHaOimOTpJ+85st7dkb5SUDsNE1B9cRJBJhljdS1Go1wuEwiXiI
      ldUt2js6CES7aI8prKeyuGIU+ZieuZKa5/5cBTO7wuxaij/5+3/Uwq/0+qIZFkvJPMpLDlUv
      X58bQqAaGrH0JonUOoppord3UukfITd1G1cNnMm8/SzZtwZoBWY1x0/f/xg1kmBqYpRrkxNN
      vf+yT4E0w2IrW2ZuLUtFMy/WcxCCYKVI9/wTgpUidjhCtXeIysAV7HDkwjX4l/HEFcKxbNSA
      SjgcZHy8scb/zC4v1I/tIUIIChWdVK7CzGoGx71Az0MIQBDJ7dA7/RV2JEp26jZGe9d516xp
      vPEFQuC4LlKDEZh6Ic2j5TTxeBu3ro21tnKnxHFdnizv4JyxpIxpOaykChdmeiPZFtFsmkRy
      jWCljCRcjLZOtt79/rksXs+KlhuAEALNsIkFIV8qN+QOndsp88bbb5GcX2h19Q7FMG0Wt/LH
      LvBzZY3NnRJyCxrqeTR+yXVQDIOAViGSzxAq5gloFYQko3X1kh+/iRlvRygXb9F9ElpuALZe
      4r/9t//O1eEebv7gXxFo4Ln19Lfz8KuHJNq7cF0X13Wp1Wp7jeyZgJcsy0iShOM4QH16IMsy
      pm4gP36MdIpeeXErR6aoNTSF7T1xKd4hOw4gIQkHSYDs2Miug+LYqLaJ7Lo4joPluFjBMFYk
      Rq2zh/z4DexYAldWeLb/KgmBsO2vryWpHut9yDWShMRzUWnNXiMhSYdcn/KzPFkEC9dhdXGW
      xc0cv/eD323ICJ6n2UWwcF2s1VVEi5XuXiUkWa57JQJSQAVFQVJVpFAIORRCClzOrWnPpBG7
      +kfIFUqUSqWmDaBWqzV/wtnd3VwhlxXXBU2r/3cJ8WQEeEYus0N7V+8+aUS9VqZYs+lpj7K0
      vMrI1QlKmU3cQIL+ng5KpRKxWOxi7ID4vFZ4swskBLZlkc/nSHT27pNGrNU0Mpk8VlGib3iI
      tbVFXFtFIU1vX5fvDu3TMjzZZihvTfMXf/VTFtZSB77e2dWDIoErJEKhEDIOqhIkoKgHCGn5
      +JwdnhiAFAhj1ipYlnVAgxZsri1RLpVo6+llYXqGnoEJAnIVNxT1Vr3X59LR+m1Qo8b0/Crh
      oIRhHiR1KzEyNsXIWP2qo6MDgM7EzVZXzcen9SOAGoryzW9/l/6uDhLx2LEHSz4+XuLJDCO/
      /pSUoTIWV3GAy7nj/Oqxna/yZHn7lQysd4XgO2+MkIiGjrzPEwMIt/fxO+8Ms7Qw74vjXkA0
      w+KvP57d585h2Q6qIr+Su29CCB4vbfO9N68ceZ8nBvDZr37GqtlNd5s/BbqIbOer+6LMgIsf
      YXYEkiSxsVPibz+dPzJiyxMD+N4P/yH593+z64PhRYk+zbBTqCK/hkOzJElU9aNzDHliAEYl
      y9DUHa72J3xp9AtCzbAoVQ0AUrnqKznNOQv2GcAvP/g53//9H/LZ+z/h9h/8PUSlQLwtAcgI
      16VSKRENh7BRkF0LoYSIRY5eaITbB8jf/zVaqZ/e3r5D1wFzTx9hywGGezuZX02R6OjixsTR
      czifk3HvyQY7hRpQD9ryDWCX3q4Em5ubBCMJtlbmSW6s0zs4jlPNMjx5i1x6E8uSGRkdYH0l
      hSTBG3ff3Ofe8DxGJYOI9qAVs9ji8GEnkYiznc2ztmJz6907JOcX9tyhfWnEs6NUM9jKlPbm
      +EJc3gQa+9pipL2H5Moig/19GIEgPb2DDHQn2HGq1GoaSBLCNqlqFpZRg8Dx+kGhWAdWZZ5Q
      NH6oKhw8+yEc2rtiPP3qIfF4uy+NeMYUKjp/85t5IqGA/zw5wBv0JD3BUQ/S0csspYpMXR1m
      eW6G4albhA4ZLp4PYng+uOKyB8WfJUtbeT6f2bwwoZbnzb4R4KwbmSTLzDz8gnIuzWZyhyvX
      bh1+7/Nl+429JZRrht/4n6P1WSKDMf7uH/+I1E6ON968S8B/9udKVT8+n8NlwpPmGIzEGB29
      wtLsI0zHixJ9DqOqHb0vftnw5BzArOb5+LOvcF2XSNcO48OvQhj564cQgprhG8DzeDICVDNr
      hHomCOAwNzftRZE+B2DZLrppn3c1Lg7C9WYEiPVcpTp7j0T3ENdH+r0o0ucANnZKXMoQOyFQ
      LIPYdpJIfgdVq6GYBpJXBoAkoSoy87NPeefuWw29JbW1Qeduhhif05Mt1Zhbz77euYKFIFCr
      ECoV6sk1ahVUQ0M1dIQsUxm4QnFkAisSxQmFQZK9MQDLqFHVbb793e81JIlSSq6gyQmyC4vc
      vnW95fW7qOimTe0YZ65GyJU1Pp/efGVdmxEC2bZQLBPJtlEsg3AhR7iYRTENZMfZFUETmNEE
      ZlsHRqKdat8wdqieK+wwJbvWSyO6NkvLa9Tym9x/HGTi6ijH5W+rVS16JrpIlXKtrt6FxXUF
      732+iHaMAUiugzjugUp43/iFi+TWk9lJ9SN+JCGQXAfZtuvKdLaF5NiohlFPcmdoyJaFbFu7
      r9tIwgUhcIIh3EAQV1FxQmH0tk4yA3dxAsG67PoJzzZabgCOqTO3uIzkGFy99kZD3qC9VwZ5
      9PAhXX1DJ5NGrOnYP/4bcF7dPVfdtOnfLqLsNlpt4jq1ieu754MSQgjCyXX6Pvh/rP/pv0Yp
      5mn/4pMzrYPkOEiKjLTbe0quWzciRUZyBbIiI7kuckBFAhQEkiIjSxKKqoCs4AJCkpCEwJZk
      XCEwFRVXDeBKMq6i4oZC2O3dWOEothrY67EdNYDYlTJ89p2hfkYqIxEWYu+89Hkngv3XL773
      hWuvhLEc22BmZp7rt95suTTiZcGt1TDmF4jcvXPeVXll8UwaEaBSzlMslQh6IY14WRgfwyqV
      zrsWryx7BhCPt17jvb9/gPa2tn0jQG57i4IOw91R5hbXGBqbophawQ0kmLg6jOu6RKNR3wB8
      zhxvpBFdh431Naq6faCPW6ytk+38Gulkleu3b7G2NAe0E7A0HN8d2qeFeLIpXNx8wqPlHVwh
      HRifHAzWI8pkSVCraTgEsGwdw7b8IHqfluLJCBCIdlFK/4ZVvYsbN2++FD0m2FxbxrYsOq5M
      kd7aYHxsklImiRvs8aURz5G1dJFPnqxzcLfVWq6NdPHO9cGWl+OJNOKTmXkQ7hHSiJOM7F7F
      p6YA6B0cOeBen1agmzY//WxhX0PXTfvcYgdm1zPoln1i4xMIxgY6GOxOHHlfyw1ADUV5++5b
      LK0lkeXz6Et8jmMtXTywsZ+nVIqqKGzulE/1GWupIonYBVCGq+aShDv6kSwdW/jSiBeNdK5y
      bLLzVxFFkY91JfHEAKRAmO9893tk12Z9aUSPsR2Xcs1gNVXAsl8853FcwXa+im7ar6UwViN4
      YgCPvviMNaONof4Bbr3GzogXCSEEhuXwi/vLFCsGiiwduo18WRs/eLQN+o3v/R4BYVGtFHH8
      xI2esJoq8Be/eEK5Zr66XqAesM8AcjtpcsWjFx+6rjdViGVUQI3R2dlx5BRIr5ZJJlNYtks+
      m9k3ZPs0zvxGjnBQfS3n9mfJvinQ6sYmiXAAxxkh3taJWS1QymWJdPahFbaJdPSBbaJVCuSr
      NuOjw8f2LvGeMfriqyjByJEGsLS8RFtnH7XMBtuGQnJniTduTp36S142arrFdqFKKOCfohzH
      vidULWYw7F7aoklKoU5yyXUszUGOJCgUi8jhdkqFDJGAxOpGiqGhIcKBow2glJwjPPgGVmoG
      3blN9JDfZWRkhHRqk3Te5cZ37/rSiCdkLZ1HkaSWOze+DuxrisPjN1BdCxFQ2Vh4SiQcIhpz
      qdV0ouEwNU0jHIlg1UpEIjGkBoJM2wanKP/iIyId/USO6JQqpRKa4TB+fYS5rx7S2TvgSyOe
      gO2ChuLP+xui5fEAdjXHo9Uc77wxxeMvP2PyzrePNIKD8OMBDufZbg+AYdk8mE+Rzl9eufNm
      afkkUQnH2V78kP8z95hArItbfoz7mZLKVfjgy2VkSUIICKh+z98MnkWEwTPxW6lp2U9/BPia
      l3+un/12aS/RhU/zeLpN8PTRfa7dfrfpiDCfr3m4mObR0vbedSig+B3DKfDEALT8Fn/z809x
      HZMacb515/JKnZyWfFkjHPS3N88Kj7RBc/SN38bNLVOrXF6pk9MihKDoT3fOFG8CYmI9FFNf
      cvedb9LTEfOiyNcSy3bRDBv1dVZ38xhPDCDS0cdwR4D/+Rd/yb//d//2+De4NnOzc/QMj9HV
      Fm19BU9ITbfQDgzyaQ1Vzby0ubxahScGUCtsY4d7+Zf//GZDCTKy6yt0Xp1ie22FrraLuV7I
      FGv88v4Kruttg/R7/wZw3V25xLpkYl2Nri6tKFsmimkiO3WJRQ+U4TQ+/vRzsslVtie/z5WR
      49OeukIgK8qpsiS1sqcUQvD50426ZuV5bMCc5yhwTNnS3uvihf+BqEcDCoHs2HXVud3G+Uwu
      UXJdJMdGdpy6NKJjIznP/l5vxJKoN+66hKL5QrlCkuv/l2VcWQFZxlWU+rUaqMsoBkM4gSB2
      OIIZb2u9AUiyTDwWoxwKYepaQ+rcvaNjzExP0zM8dgppxB8jua2RRnSF4HpZv5RpzGTHAUlC
      Cnwd1yc59t61DKAoyK6DFAjUG6yq1nVBZbkeFhsMIhQVIUkIScJVVURQxpEVbCVcl0yUZSxZ
      wZUVhKIgFBVXrkspCkVBqAEcRd3VBK1LHUp8LX0o72kj1tuFcA++3jsI03W9tfNLIdB1jWA4
      2nSvWa1WfWEsn5awNwIoitLyBdb66hKTt+7S7DT2mUOcbwDnh+O6mNbR3qWqIhNoRP34ArFn
      AIFA60PVFUUhEAjuOwlOri+T0wSj3VEW11P0DI1STK7gBuLcvjm1+z4/lP68EMAvv1giVzo6
      EEpVJN5tQsunMx6mPX58ovVW4skukK2V+ODDj5HCcQ7a0xkYvkpxfp5crsIbd99ibeEJwcgg
      ISpYuz2/PwKcDiEEm5kyI71tpLIVnq5sN5yL2bYd8mWDgHq8D8v9+XTDdepuj/AHb4+d6+/q
      iQFUMquEuscY7YsdPP+XIBgMEglAuVhCCnYijBomdQkV/+zz9OimzefTmwx1J5jfyJItaU01
      vFZsv+4UatiO25BhtYrWb4NaOls5jfTyCvl0O8Mjo7z8dSVJZmJ8fO+6u6Oz1dW6dGSKNaq6
      xcOlNJuZ8oU4T5CAn9xbaFiVIhIKMDnU2bDhDnTFCR6TjKL1meKVAMNXpwiE27BRUfxZzLmQ
      L+sEAwozq5kL0fihvh35LJinEWq6xXa+0vAxSHssxEDXfmlEF0GuqGE5jhfnAApuaYO//vk9
      Rgd7GZ+canoXyOf05MsasiQhv8I9kCRJqIckuzuImmGzlMwfeY8nTTGc6OYPfuc7BELNnwH4
      nJ50rkIyWznvalxIPFkE3//0l2yJIWRTw2PXmUuPEIL78ykUv+c5EE8M4Na7v0soWaS9fbLp
      BHk+p6NQ0cmVtGMXg5cVb8RxzRKpvE5ArbIbFuzjEfPr2VfudNZL9j2Zrc2tfTdtb6cpl0+u
      1R6IdlJOr7C2sXnkFGhzZZGnMzPUamUePnjAZtqPHjsNVc1kNV30DxCPYN8IUCqVqJSyaDWN
      3pExMjs7yEqAaKhCpbDDRrrA2+++25Bf/14hgQChUAiQj1wEa4aOawu217YYe/MO6cUF3N4O
      XxmuSQzL4ePH65SqBu6z5NY+B3LgFCgQjjHcHWNmp8T1iQm2NjYxTYNaSd+VToRAsPFCzFoR
      OZzANWs44vB5V9/ACK5RYHUth1osY9murwx3Ah4u7VCsGEiShNLEtuFlZJ8uUKVSQZZlggrY
      cpCttTV6+vqQJYFeKaG7MgMDgzQ6rRS2QTpXoT0eJpvJMXjlyqGHYZVClnShxsTVETZWl+ke
      HCUaUn1doAZxXcHcRpbHz8mm+BxN66URa3k++mKW73zjLb649wnf/MGPfGnEFiCE4KOHa2xd
      EDeHV4XWJ8mLdjAxkODXv/6YiZt3m278Pi+yna+yldm/IVHVTb/xnwBPpRFTWxv0DIw0PH16
      hj8C1BFC8N7ni5Rr5vE3+zSEJ92FY5lkMhmKpTKW3Zo43ctAqWqQLzeXncfnaDyZkJRTs3z4
      KIOd32BmNc0//bt/4EWxLUczLO+U2oTgi7mk79JwxnhiANHOQVRrhVDXIJNjQ14UeeY80+F/
      NoJZtssv7i9jNuHOe1r8ZHdnjzchkZZNIKjS2dPN9WsXU+jqOCzb5f9+NIP53BQuHFTPNZrJ
      5/R44wskywjXpVgs4sK+iLCXMUo7PFrYItHRxY2J44W0vGA5mQepHpXk8/rQ8kWwEAJXUulp
      j2KYdkPRPNl0kVvv3EGxL8aCz3FdZtcyKLK/xfi60fIRwNZL/Kc/+zNuTI7yxh/+aUPJMbp6
      Ezz66iHxePs+ZbjnleAOu7YME2VxsaEEfo2QL+sEF9NEL9geezUco5zopDe7hXJRM0K6LlIT
      dZOEe6yinyQEknPwPbJj77/fcV6QdHz+npafAwghEK7DzOP7rG5X+NEP/7ChmIDnq1Uul0kk
      9sd2HorrYkxPIy5qozgjlM5OAkNDGDOziAN++IuKJMugHN/3SrIE6uH3SYoCh/g6SS85q0mK
      /MK9klqXVdwzgEql0vK8sitLcwxfvd50UEytViMSifg7ID5njqcnwYV8jkR7176geNvUKVZN
      OtsirKysMXx1nHI2iRuI09ORoFQqEYvFfAPwOXM89czJ7KSItXXt2wXK53KkC2X0nERHbz/L
      ywu4poRCka6uN3x3aJ+W4cmqrpSc5c//x/9iZmnrwGVpT98AqgSOkIjFYihYBAIRQoEAr/cs
      3ue88WZbQ5KxjMMcuASba0sUCgUSXV3MPXlKZ98YsihiqSH8XXefVtL6bVCjxsziBtGQhHFg
      Pi2JkbEpRsamAOjs6gagp/12q6vm4+NBPEAoyje/+32E+BRDDl3KrCo+FxdPFsH51cfM7dSY
      6JVxBP605pKgGdah2p+RkEoocP7RUZ6lSf2dt3tYWlr2pREvCbbj8t7ni4caQECV+eE744RO
      kPU+qCoNK0ofhycG8Okvf8Ka1UtHLMQZeSf4nAPLyTy5ktbQvRXNPDKpt227/OSzhab9q1wh
      aIuG6O04ef7oyeEuOnYz03hiAL/zo3+C8Zv7BCNxXxTuFcWyHe7PpXCbODc9Kj5ZkiSUEywI
      ZUmioplUtJOFhQohWNrKe2sARnmHjsFJrvYlfGn0VwzHcdnYKZEv65i288oH3T87TH0WybfP
      ABYXFhkbG8W0HMLhELqusb29w9DgAEJSUGQwTYtwOIyhawRCESxDRw0GqZTLxKIRHCERDn3t
      jBRM9JH/6h61Yjd9/f2HrgMWZp5gonClv5u5lS3aO3uYGhtuwWPwaZSnKzs8Xt5GlqVXvvEf
      xD4DsCyL2enHSK6F2jaI61g4psaTpzMIJIKqhKqC4qpMryzRPzBMuZDn7rvfYieZIojBw8U0
      //Qf/Z29UzZHL2FJYexi/khluEgkTC1fYm1lm5tv3yE5v7DnDu1LI7YG23FZ3MrjHOQIKWB2
      PbsXh9xqZ8nz4MC2GIm30xeDpYJDWJGwn5v3BSNxRgYSrM+nGJ28yXBPJ8V4kI3NJCEZilWd
      vvYENvBsDFCDEYRtEgiGjtwFUgNBgkGZoBpkYXqOoBr0pRHPkFLVYC1dRCDYzldxXUFZM7Ft
      99BdFUmSX+uzm33eoHvBJRIIZAxDJxAMIhx7dwokIcsSQoBp6KjBELZpoAbDSAgc28JFJhQK
      IgGOUWE1XWZspJ+1pQWGJq4TPGQkdWyrPvWK7E6vgmEUWfJ1gZpACMFXCynSuSpjAx2spApU
      9fqC0XZcZEnyn+Nz7BsBnhdTlYBIJPLshRfukyQIR+pbUWrk6y2pg8RYnzz4Ase4zuxs3QAO
      Q1EDRNT6MVk4HGn8W/jskSnWmF7JEAwoPF5+USPUD+ncjyfxAFq5wNLaFlcnrxEPN38O7I8A
      YJg2T1Z2jr0vmS2jGa9OdNh542lAzNz0Y8auv9lQXPDzXHYDEELw8eN1kpnypX0GrcKTcwCz
      VuTBkzks0ySRLzLY0+5FsZ7juC41/SCP1xdJZis8WW5cwlxQHwF8DaKzxxMDqO4soyntWOV5
      vrz/Jf/wj//Qi2I9xbIdfvN4/UDl5pep57ttbj7uN/7W4IkBxHvH0ac/IdTWz92rr6Y04lEU
      yjo//nQOVZH9hvqK4cm2gOs6CAQ76S36BhozgHw2g2VfzIMXx3HJFmtkdv97sJgiqCr+Lssr
      iEfaoAaWI7h+41ZDuQEq2+tsazLJnSXeuDnV+gruIoRAN+0jHb6EgM9nNknnqnt/U2R/b/1V
      peUGIITL1lYarbjNzGKQWzeuIR8zSygXDYanJknOL5yiXMFaukg6V2n4PYbtsLFdOuZzQVEu
      gF/M80bqG1/z7D6/lhuAo1f47P4D4orF8Btv08gUue9KLw++ekhn78A+aUT42iflZWlESZKQ
      ZRlT0zHf+xmby+mmAicCwHjT39AbalfGqY1OACALwdW//K/k3vwGndMPWP8H/4KO+/fIffN3
      iW2uEt5cPXlBh8gOSqr6oqEJUZcYlKT6awcguW5dGlFVj02OLj0noSgpCgf6zIhdWUNFqavL
      Pf9+u372Ib0UZSY7zu4bZaTnet563T06BxBCoFWLTM8uceftd5tWhmv2HEAIgdANXqfoG0lV
      kQL1Q0QhBNq9zwhOTmAsLBL9zrcRhoEUDoNtI+wWHIQd9eyP+V2anh4ed/9J6nLQ3yXJW2nE
      6ScPmLx5t+mDMF8a0adV7I0X8Xi85YUND4/Q0d62byFcyKQoGBJDXVHmFlYYGb9GIb2KG0gw
      NlKfBkWjUd8AfM4cT3aBhHDZSaepHnJKGowm0LMbpLQSU7dusrY8DyJBwKng+O7QPi3EEwMo
      bTzlk+k8Qz1tB74e2fX8lCWBaZoIFIRjYeP6McQ+LcUTA1AibVSzT0i7Bu6+dalgc20ZQ9cZ
      npoiub7BlbFJSjsbOIFeb9V7fQ5FCEG2pPHVfBLbOfnmggR848Yg7btB6Y1SrF1N0uUAAAtQ
      SURBVOj8djbZeBk3h+hpP145whNpxKezi8iSOEIacZKR3avEjRsAREfGWl01n+fIFmusbRcP
      fd2266GTZ3H+8dPPF5FPMJ1tNEumEIJUtnIxDEANRXnnnXfYTP4cJaD6U5pzIpkt72WY1wyL
      tXQRzfi6Q7IdQeCYY/qzOvzzQhGuojWWv9mbRNk7q7iRDiKyi+1LI3pKVTdZSxd5sJDa6z0l
      SULePTR8xmFhqq8ikiRRrpkIIY4dMTwxADWc4HvfnSC1POtLI3rMzGqGhc0c6iG5tF5XaoaF
      4NgDaG8M4P69j1gzOunv6W7IGc7n7DAs+1J6qVZ1C9cVyMoFGAG+/YMfsfPBPUxDw3EPTezn
      0wJ08+iUo68rsgQfPVhtfgpUrZQQkkosFj10+HBdByEklOcWRbZtox7iFGVqJcJtfYwMdB05
      BbIMnZpuEk8kMLQqoUj0UvZeZ8nzC93LhKooZBsQ8t3XYhcW5lEl6B+7QS69xdXxMXLb20ih
      GO1hmbVUloGOIEU7gVvdpnPgCpJR5qvZZX7ve98+sJBY9ygRZ5Ga0X6kASwuzBNt6wS9xFpB
      R0HmjRsTDX9pnxdxXXGoPLlPnX0GoGs1ZCWEq1fQ9DKzM3PIwQShWpaCbZGIBShrNkLWKZZr
      pApP6Ii2M9TffWgh5e0lQv030XfmMZy3iBwy8ert7SGZ3CKjqdz4ji+NeFpM28EwLX8UPYJ9
      TTEQCCArKsViGTUQRkEm1pZAsmsYNYO1jRSjY2NIpoYpVMJBFceskK8KhvvKoKo4rkQ8+vVJ
      X6L3KuVHvybS1kPoiPm/oes4QmJkvJ+Zrx7S0dXrSyOeAsNygRe3O31epKl4gPTmGjuFKtdv
      3iR4zOr6GXYtz/R6gbdujDP98EvG3nj30BHgMC67LtBJyRRr/OzzRT9Q/wiaaor9w6P0N6lW
      rgSjrE2/z+L0A6RQG9ffau79Ps1j2Q5/e28B1xXnH7p5wfFUGe6k+CNAc2xlynz41Yrf8zeA
      p93Dk4dfckm3pT1lO1/1e/4G8eQgTC+m+fHPP8Z1HaxAB2/f8rc2W8lOoXr8TT6ARyOAXkwz
      fPPbDPV0UsilvSjy0rCxs1/GxbQdf7rYIJ6MAKGOITIPPmHq9tsMdr+ewrjnhWHtV4A4qxy6
      lwFPRoBQtI2+zijv/eQnhGIHh0W+gHBYmp+lWNVbXzmfS40nBqCVc2hE+ZN/9o8JNFBibn2F
      6MAoW+trra+cz6Wm5QbgWgZf3H9Acv4+nz5cbEiqyrZdwuHwXnZCH59W0XptUFxsxyUQUAhH
      Yw2FRPZevcrTJw/pGR4/kTRis9eu6+5FDz1/DfWcZ81eCyFeqOPLdW72+qjvGP3oA3Lai7s+
      VxM9lCZv0vHR+3uSgV4huQ7SS7qlknqyGEDJqXuySrIML3kaS7sSjpKqwDNXj2fSiexKJEoy
      IJBtBym4WwchkIULqlr/jGcHYZZl0cozMSFc8rk8HV3dTUeFVSoVT4S7fC4fe2blOE5LDQAg
      ublKJNHRtDTiM29QH5+zZs8AwuHmdFpOQjgcIRKJ7DOA9MYKeR2u9ERZWE3SNzxGMbWME0hw
      69o4pmkSDAYP/lAfn1PgyTmAY1S59/mXuEqIg9Jd9A6OkF9YJLNjcevObVYXplGC/USoYO/O
      gRVF8Q93fM4cTwygklnBjfZztT/OfhcVgaFr1DSNRHuMdDKNkOMYlSyGLO0JZvmcP7bjMr26
      g27aIGB8sIOejljTn5POVag1EaoZCQUY6GrNGtCDDDECNdJFYesLtGI7AwND+zLEVKtVeru7
      6RkYpJjPMTQ+hFYpIJQIvj/j2SKEIJ2rsLCZbzpeuGZYGKaNLMsIIVhNF2mPhQ4uh7qBtEVD
      +z7js+nNpqLUXCH4Zz+4yeJmDmdXwGtqpOtMIt1abgCuqTE9O0etVsMmcMA5gERP38DeVV9f
      HwDxts5WV+1S8mhpm4eLaUKBk00pn23TPntvsXq4AtsXs0ncl8RgZbn59FJCCP7fJ/Popo2q
      yDiuiyTB9Ss9TdZ+Py03ACUU5fbNSe4/WSAh+wvZ88S2XebWs4SD3kgOq4rMWQzhiixjWs6e
      4SiyzNx6lo2d43MyAyQiQb516+BILk+ehKVXGbk6QalYPEAd2scraoaFaTsEX8FAmZcd/HTT
      QTePlz0BSGUrvDXZf6DhexgRJupKXSeYtzmOs3ci2giu6yJJ3qQudRwHpcVKX2dVhmU7lGvm
      oWm0HNf1REHC63KEgHg0eKDhvxIhkc3ipQG4rtty1QUvyris5byWBuDj0yivReBoMZtmYWVj
      7zq5ucEpkpgcjnB4/Ojhrt6Oy/TDByyubOztbOWymVOvcbY3ltjYzgOwtjhHSTPJpzdZTW6f
      7oMPIJtaZ2Vzp34hHB4/fnrmiWVTa/NsZuqL1dW5p5RNl+zWKmu73/EsySRXWEtm9643NjcO
      v3mX1yIDUSjWjrWzvHedz2QJhUNsbm4y2NvJ0rZGV0ecqaunPFZzXYLhELbrEkKiWCwz2NXP
      5soC2aJBNCKxtblJz8jkiQ9u4vE4G0UN6MQSLtupNMKs4soKq4t5qo5KSBjI0U7Grwye6uvE
      4gm2UwWgl1oxg+uYZMom6aXHOFKI9rYwhi1zfXL8xMnoOxJRlssGwyRwZZnUxiZuLYsUV1ia
      T2HLEUKKhCpL9F8ZRT3FrDWeiLOT/DqIKpvJ4Fg23VFBRgtTKGdpa+tmYvTr5/ZajADP+zG5
      rouLRDazg1bOk8nkGJ64geyegUisEiD03EKqvauXkcFelldWkCUBgRBTk6OUC41tzx1EKPT1
      wZGkhBB6ETkYAUx2dopsbmyAEmbslI0fIPxcWZubWwhJIrWxQSTRQXtYpmpKXJscO3Hjf7kM
      5BAYOeRgHNfRyGbLbGxuIguTgmadqvG/WJbYWwdqmoZWKaLpDlenriM5L+4cvQYjgGBrbQXb
      sqloFnpxm+6hK8QUGyUYobuznUAYnN7eU5dk61XKVQ07lWby6hBDI4MoisKdt95ip2jQ3xVj
      dTPHxOT4CUtwWdtIYpoupjNEb28vstMBoRiOqRFWdugPJ+hMNBZXcRzrG+vYuolmufSNTNDe
      3kaxWGJ+5gkDV68zGg+fKJfX8yxtpHFsFcvppre3F2G3oURi2JZNVsBwooOQqOKGGgiVPYbV
      tU1sU2BYA+RS6wyNTqI6VbL5EkODXYQDCoGX2oG/CPbZh9fet+VSiVii7VyyB/kG4HOpeS3W
      AD4+J8U3AB9P0bUq+UIR97iJhxBUyiVsV1CrlimUysdELDp88ek9yjWNQqGIEIJKqYhlO5iG
      RrFcQQiXYrGIVs7x+ZePcXktFsE+rxIfvvc3dI9MUtQkbgwnqIoI7dEAPe0xCqZCW9Blen6V
      0cF2/vN/+XP+zX/4j7z/13/F9WtjlEQXQwkHKdbD3MIsd26/RTG9Qf/YdTrjoFmC7NYqqZU5
      qmo7NRMQDtdGeph59JTe0X4sW8UNtBExyzj4I4CPxyhqkFtvvUs5s046vc2vfvYe04/u8/6H
      v8ZWgvzy5+/T06Hw5dwmt+9+k85IgEAoxp1vfI+d9RnS6R3e++l7dFy5jrM9y29nVvj03hd7
      n98Wj5CsyvSoNSbe/Ba2ViasQrB7CLNY4O4736CU/Vqe0zcAH08JqjKf/eZXjE7dZiuVpqen
      m3e+8TaLmwUG4ipDg708nVlmeHiAWCwKgIrFrz/8gBtv3SWZLtDT3YVbzFKTosRCQa5f+1ps
      +Ve/+JDevh66r1xj4Ytf0Nk3yIcf3aO7LcKV8Qk++eiXjE5e27vf3wXyOXeSq3OURYLrY6c5
      3LP42Y/f5/t//COix8Q7GJU8H37ykD/649/3DcDncvP/ASbxXSpzdWj9AAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='total death top10' width='192'>
      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
      AAAAAElFTkSuQmCC
    </thumbnail>
  </thumbnails>
</workbook>
